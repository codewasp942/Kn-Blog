{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230 juruo999 \u7684\u535a\u5ba2 \u00b6 \u8fd9\u91cc\u662f\u6211\u7684\u535a\u5ba2\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5206\u4eab\u81ea\u5df1\u7684 OI \u5b66\u4e60\u5fc3\u5f97\uff0c\u5076\u5c14\u8fd8\u4f1a\u53d1\u4e9b\u5176\u4ed6\u7684\u6587\u7ae0\u3002","title":"Getting Started"},{"location":"#juruo999","text":"\u8fd9\u91cc\u662f\u6211\u7684\u535a\u5ba2\uff0c\u6211\u4f1a\u5728\u8fd9\u91cc\u5206\u4eab\u81ea\u5df1\u7684 OI \u5b66\u4e60\u5fc3\u5f97\uff0c\u5076\u5c14\u8fd8\u4f1a\u53d1\u4e9b\u5176\u4ed6\u7684\u6587\u7ae0\u3002","title":"\u6b22\u8fce\u6765\u5230 juruo999 \u7684\u535a\u5ba2"},{"location":"about/","text":"\u5185\u5bb9\u5217\u8868 \u00b6 {{ blog_content }}","title":"\u5185\u5bb9\u5217\u8868"},{"location":"about/#_1","text":"{{ blog_content }}","title":"\u5185\u5bb9\u5217\u8868"},{"location":"about/about/","text":"\u5173\u4e8e\u6211 \u00b6 Luogu : juruo999 Github : codewasp942 Atcoder : juruo999 Codeforces : toiDlReOtL Luogu Blog : juruo999 \u6d59\u6c5f OIer\uff0c\u5f88\u5f31\u3002","title":"\u5173\u4e8e\u6211"},{"location":"about/about/#_1","text":"Luogu : juruo999 Github : codewasp942 Atcoder : juruo999 Codeforces : toiDlReOtL Luogu Blog : juruo999 \u6d59\u6c5f OIer\uff0c\u5f88\u5f31\u3002","title":"\u5173\u4e8e\u6211"},{"location":"about/tagidx/","text":"\u6807\u7b7e\u7d22\u5f15 \u00b6 {{ tag_content }}","title":"\u6807\u7b7e\u7d22\u5f15"},{"location":"about/tagidx/#_1","text":"{{ tag_content }}","title":"\u6807\u7b7e\u7d22\u5f15"},{"location":"about/todo/","text":"To-Do \u00b6 \u91cd\u65b0\u5199\u4e00\u904d\u7f51\u7edc\u6d41\u8bb2\u4e49 \u5b9e\u73b0\u4e09\u89d2\u5256\u5206\u7684\u968f\u673a\u589e\u91cf\u89e3\u6cd5 \u628a\u539f Blog \u7684\u9898\u89e3\u642c\u8fc7\u6765","title":"To-Do"},{"location":"about/todo/#to-do","text":"\u91cd\u65b0\u5199\u4e00\u904d\u7f51\u7edc\u6d41\u8bb2\u4e49 \u5b9e\u73b0\u4e09\u89d2\u5256\u5206\u7684\u968f\u673a\u589e\u91cf\u89e3\u6cd5 \u628a\u539f Blog \u7684\u9898\u89e3\u642c\u8fc7\u6765","title":"To-Do"},{"location":"graph/network-flow/","tags":["\u7f51\u7edc\u6d41","\u56fe\u8bba"],"text":"\u7f51\u7edc\u6d41 \u00b6 \u7528\u6c34\u7ba1\u6765\u7c7b\u6bd4\uff1a \u81ea\u6765\u6c34\u5382\uff08\u6e90\u70b9\uff09\u8981\u7ecf\u8fc7\u6c34\u7ba1\uff08\u8fb9\uff09\u628a\u6c34\u8fd0\u5230\u77f3\u8001\u677f\u5bb6\uff08\u6c47\u70b9\uff09\u3002 \u6bcf\u6761\u5355\u5411\u6c34\u7ba1\u8fde\u63a5\u4e24\u4e2a\u7ad9\u70b9\uff0c\u6c34\u7ba1\u90fd\u6709\u4e00\u4e2a\u6700\u5927\u6d41\u91cf\uff0c\u6e90\u70b9\u6709\u65e0\u9650\u7684\u6c34\u3002\u663e\u7136\uff0c\u6bcf\u6761\u6c34\u7ba1\u53ef\u80fd\u6709\u6c34\u6d41\uff0c\u53ef\u80fd\u6ca1\u6709\u3002 \u95ee\uff1a\u81ea\u6765\u6c34\u5382 \u6700\u591a \u80fd\u7ed9\u77f3\u8001\u677f\u9001\u591a\u5c11\u6c34\uff1f \u7f51\u7edc\u4e0e\u6d41 \u00b6 \u5b9a\u4e49 \u00b6 \u7f51\u7edc \uff1a\u56fe\uff08\u4e00\u822c\u4e3a\u6709\u5411\u65e0\u91cd\u8fb9\uff09 \u5bb9\u91cf\u7f51\u7edc \uff1a\u8fb9\u6743\u4e3a\u8be5\u8fb9\u5bb9\u91cf\u7684\u7f51\u7edc \u6d41\u91cf\u7f51\u7edc \uff1a\u8fb9\u6743\u4e3a\u8be5\u8fb9\u5b9e\u9645\u6d41\u91cf\u7684\u7f51\u7edc \u5269\u4f59\u7f51\u7edc \uff1a\u5bb9\u91cf\u7f51\u7edc\u8fb9\u6743\u51cf\u53bb\u5269\u4f59\u7f51\u7edc\u5bf9\u5e94\u8fb9\u6743\u5f62\u6210\u7684\u7f51\u7edc \u6ee1\u6d41 \uff1a\u6d41\u91cf\u7f51\u7edc\u7684\u6d41\u91cf\u8fbe\u5230\u6700\u5927\uff08\u5373 \u6d41\u5165\u6c47\u70b9\u7684\u6d41\u91cf\u6700\u5927 \uff09 \u589e\u5e7f\u8def \uff1a\u5269\u4f59\u7f51\u7edc\u4e2d\u4ece\u6e90\u5230\u6c47\u4f7f\u8def\u5f84\u4e2d\u6700\u5c0f\u5269\u4f59\u8fb9\u6743\u4e0d\u4e3a\u96f6\u7684\u8def\u5f84 \u6e90 & \u6c47 \uff1a\u6240\u6709\u6d41\u91cf\u4ece\u6e90\u6d41\u51fa\uff0c\u6d41\u5165\u6c47\u70b9 \u6027\u8d28 \u00b6 \u5269\u4f59\u7f51\u7edc\u5728\u6ee1\u6d41\u65f6\u4e0d\u4f1a\u6709\u4e00\u6761\u589e\u5e7f\u8def \u82e5\u6ee1\u6d41\u65f6\u5269\u4f59\u7f51\u7edc\u4ecd\u6709\u589e\u5e7f\u8def\uff0c\u5219\u6cbf\u7740\u589e\u5e7f\u8def\u589e\u52a0\u6d41\u91cf\u603b\u80fd\u4f7f\u6700\u7ec8\u6d41\u91cf\u589e\u52a0 \u4efb\u4f55\u4e00\u4e2a\u5408\u6cd5\u7684\u6d41\u91cf\u7f51\u7edc\u4e2d\uff0c\u9664\u4e86\u6e90\u548c\u6c47\u5916\u7684\u6240\u6709\u8282\u70b9\uff0c\u6d41\u5165\u91cf\u4e4b\u548c\u7b49\u4e8e\u6d41\u51fa\u91cf\u4e4b\u548c \u76f4\u89c2\u7406\u89e3\uff1a\u6c34\u4e0d\u4f1a\u5728\u4e2d\u95f4\u8282\u70b9\u51ed\u7a7a\u4ea7\u751f\u6216\u6d88\u5931 \u5272 \u00b6 \u5b9a\u4e49 \u00b6 \u7ed9\u5b9a\u4e00\u5f20\u56fe \\(G=\\{V,E\\}\\) \u548c\u6e90\u70b9 \\(A\\) \uff0c\u6c47\u70b9 \\(B\\) \u3002 \u5272\u96c6 \\(C(S,T)\\) \u88ab\u5b9a\u4e49\u4e3a \\(\\{(u,v) |u\\in S,v\\in T,(u,v)\\in E\\}\\) \u5373 \\(C(S,T)\\) \u4e3a\u7ed9\u5b9a \\(S,T\\) \u4e24\u70b9\u96c6\u95f4\u7684\u8fb9\u96c6 \u6700\u5c0f\u5272 \uff1a \u8fb9\u6743\u548c\u6700\u5c0f \u7684\u5272\u96c6 \\(C(S,T)\\) \uff0c\u4f7f \\(A\\in S,B\\in T\\) \u3002 \u5373\u82b1\u8d39\u6700\u5c0f\u4ee3\u4ef7\u628a\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u6240\u6709\u8def\u5f84\u5207\u65ad\uff0c\u4f7f\u6e90\u70b9\u6c47\u70b9\u4e0d\u8fde\u901a\uff0c\u5207\u65ad\u4e00\u6761\u8fb9\u7684\u4ee3\u4ef7\u4e3a\u5b83\u7684\u8fb9\u6743\u3002 \u6027\u8d28 \u00b6 \u4e00\u4e2a\u6d41\u91cf\u7f51\u7edc\u7684\u6bcf\u4e00\u4e2a\u5272\u96c6\uff0c\u5bf9\u5e94\u7684\u6d41\u91cf\u548c\u90fd\u7b49\u4e8e\u603b\u6d41\u91cf \u4e00\u4e2a\u5f62\u8c61\u7684\u4f8b\u5b50\uff1a\u6050\u6016\u5206\u5b50\u5207\u65ad\u4e86\u82e5\u5e72\u6c34\u7ba1\uff0c\u4f7f\u539f\u6765\u6d41\u5411\u77f3\u8001\u677f\u5bb6\u7684\u6c34\u5168\u90e8\u6d41\u8d70\uff0c\u6700\u7ec8\u4ece\u88ab\u5207\u65ad\u6c34\u7ba1\u6d41\u51fa\u7684\u6c34\u91cf\u5c31\u662f\u539f\u6765\u6d41\u5411\u77f3\u8001\u677f\u5bb6\u7684\u6c34 \u540c\u4e00\u5f20\u56fe\u4e0a\uff0c\u6bcf\u4e00\u4e2a\u5272\u90fd\u5927\u4e8e\u7b49\u4e8e\u6bcf\u4e00\u4e2a\u6d41 \u8003\u8651\u4efb\u610f\u4e00\u4e2a\u5272\u96c6\u548c\u4efb\u610f\u4e00\u4e2a\u6d41\uff0c\u7531\u4e0a\u4e00\u6761\u6027\u8d28\u5f97\uff0c\u5272\u96c6\u5bf9\u5e94\u7684\u6d41\u91cf\u7b49\u4e8e\u603b\u6d41\u91cf\uff0c\u800c\u5272\u96c6\u5bf9\u5e94\u7684\u8fb9\u6743\u548c\u5927\u4e8e\u7b49\u4e8e\u8fb9\u6743\u5bf9\u5e94\u6d41\u91cf\uff08\u6bcf\u4e00\u6761\u8fb9\u7684\u6d41\u91cf\u5c0f\u4e8e\u7b49\u4e8e\u8fb9\u6743\uff09 \u6700\u5927\u6d41\u7b49\u4e8e\u6700\u5c0f\u5272 \u6ee1\u6d41\u65f6\uff0c\u6839\u636e\u589e\u5e7f\u8def\u7684\u6027\u8d28\uff0c\u5269\u4f59\u7f51\u7edc\u4e2d\u6e90\u70b9\u6c47\u70b9\u4e0d\u5b58\u5728\u6700\u5c0f\u5269\u4f59\u8fb9\u6743\u4e0d\u4e3a\u96f6\u7684\u8def\u5f84\u3002 \u65ad\u5f00\u6240\u6709\u5269\u4f59\u6d41\u91cf\u4e3a\u96f6\u7684\u8fb9 \uff0c\u53e6 \\(S\\) \u4e3a\u6240\u6709\u4e0e\u6e90\u70b9\u8fde\u901a\u7684\u70b9\u96c6\uff0c \\(T=V-S\\) \uff0c\u5219\u5272\u96c6 \\(C(S,T)\\) \u5305\u542b\u7684\u6240\u6709\u8fb9 \u5269\u4f59\u6d41\u91cf \u4e3a0\uff0c\u5373 \u6d41\u91cf\u7b49\u4e8e\u5bb9\u91cf \u3002\u7531\u6b64\u5f97 \\(C(S,T)\\) \u7684\u8fb9\u6743\u548c\u4e3a\u6700\u5927\u6d41\u7684\u6d41\u91cf\u3002\u7531\u4e0a\u4e00\u6761\u6027\u8d28\u5f97\uff0c \\(C(S,T)\\) \u4e3a\u6700\u5c0f\u5272\u3002\u7efc\u4e0a\uff0c\u6700\u5927\u6d41\u7b49\u4e8e\u6700\u5c0f\u5272\u3002 \u6c42\u6700\u5927\u6d41 \u00b6 \u90e8\u5206\u5f15\u81ea OI-Wiki \u8fd9\u91cc\u4ecb\u7ecd\u4ee5\u4e0b\u7b97\u6cd5\uff1a Edmonds-Karp ISAP \u9884\u6d41\u63a8\u8fdb & HLPP \u5c0f\u8d34\u58eb \u8003\u573a\u4e0a\uff0c\u5c3d\u91cf\u4f7f\u7528\u6bd4\u8f83\u597d\u5199\u7684 Dinic \u6216 ISAP \uff0c\u8fd9\u4e24\u4e2a\u7b97\u6cd5\u867d\u7136\u6bd4 HLPP \u7406\u8bba\u590d\u6742\u5ea6\u9ad8\uff0c\u4f46\u8db3\u4ee5\u89e3\u51b3\u7edd\u5927\u591a\u6570\u95ee\u9898\uff0c\u800c\u4e14\u597d\u5199\u3002 Edmonds-Karp \u00b6 \u7531\u4e8e\u6700\u5927\u6d41\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u5bfb\u627e\u589e\u5e7f\u8def ISAP \u00b6 \u9884\u6d41\u63a8\u8fdb & HLPP \u00b6 \u524d\u9762\u7684\u7b97\u6cd5\u90fd\u57fa\u4e8e\u5bfb\u627e\u589e\u5e7f\u8def\u6765\u6c42\u89e3\u6700\u5927\u6d41\uff0c\u8fd9\u91cc\u518d\u8bb2\u4e00\u4e9b\u4e0d\u57fa\u4e8e\u589e\u5e7f\u8def\u7684\u7b97\u6cd5\u3002 \u9884\u6d41\u63a8\u8fdb\u7684\u6838\u5fc3\u5728\u4e8e\u5141\u8bb8\u8282\u70b9\u7684\u6d41\u5165\u5927\u4e8e\u6d41\u51fa\u3002\u6211\u4eec\u628a\u5141\u8bb8\u6d41\u5165\u5927\u4e8e\u6d41\u51fa\u7684\u7f51\u7edc\u79f0\u4e3a\u9884\u6d41\u3002 \u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\u7ef4\u62a4\u6bcf\u4e2a\u7ed3\u70b9\u7684\u9ad8\u5ea6 \\(h(u)\\) \uff0c\u5e76\u4e14\u89c4\u5b9a\u6ea2\u51fa\u7684\u7ed3\u70b9 \\(u\\) \u5982\u679c\u8981\u63a8\u9001\u8d85\u989d\u6d41\uff0c\u53ea\u80fd\u5411\u9ad8\u5ea6\u5c0f\u4e8e \\(u\\) \u7684\u7ed3\u70b9\u63a8\u9001\uff1b\u5982\u679c \\(u\\) \u6ca1\u6709\u76f8\u90bb\u7684\u9ad8\u5ea6\u5c0f\u4e8e \\(u\\) \u7684\u7ed3\u70b9\uff0c\u5c31\u589e\u52a0 \\(u\\) \u7684\u9ad8\u5ea6\uff08\u91cd\u8d34\u6807\u7b7e\uff09\u3002 \u521d\u59cb\u5316\u65f6\uff0c \\(h(s)=n,h(other)=0\\) \uff0c\u5e76\u6cbf\u8fb9\u63a8\u9001\u8d77\u59cb\u8282\u70b9\u6d41\u91cf\u3002 \u6700\u9ad8\u6807\u53f7\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5 ( HLPP ) \u4e0e\u9884\u6d41\u63a8\u8fdb\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5728\u9884\u6d41\u63a8\u8fdb\u65f6\uff0c HLPP \u4f1a\u4f18\u5148\u63a8\u9001\u9ad8\u5ea6\u5927\u7684\u8282\u70b9\u7684\u6d41\u91cf\u3002\u4e3a\u4e86\u5728\u968f\u673a\u56fe\u4e0a\u8dd1\u51fa\u63a5\u8fd1 Dinic \u901f\u5ea6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5bf9 HLPP \u8fdb\u884c\u5982\u4e0b\u4f18\u5316\uff1a \u5c06 \\(h(u)\\) \u521d\u59cb\u5316\u4e3a \\(dis(u,t)\\) \uff0c\u5c06 \\(h(s)\\) \u4ecd\u521d\u59cb\u5316\u4e3a \\(n\\) \u3002\u7528 BFS \u6c42\u51fa \\(dis(u,t)\\) \uff0c\u5373\u53ef\u51cf\u5c11\u5927\u91cf\u91cd\u8d34\u6807\u7b7e\u64cd\u4f5c\u3002 \u7528\u6876\u4ee3\u66ff\u4f18\u5148\u961f\u5217\uff0c\u590d\u6742\u5ea6\u964d\u4f4e\u4e00\u4e2a \\(\\log\\) \u3002 \u56e0\u4e3a\u6bcf\u6b21\u53d6\u51fa\u7684\u662f\u6700\u9ad8\u8282\u70b9\uff0c\u800c\u91cd\u8d34\u6807\u7b7e\u53c8\u53ea\u4f1a\u589e\u52a0\u5f53\u524d\u8282\u70b9\u9ad8\u5ea6\uff0c\u6240\u4ee5\u5982\u679c\u5f53\u524d\u8282\u70b9\u9ad8\u5ea6\u4e0a\u6ca1\u6709\u5176\u4ed6\u8282\u70b9\uff0c\u6bd4\u5f53\u524d\u8282\u70b9\u9ad8\u7684\u6240\u6709\u8282\u70b9\u90fd\u4e0d\u53ef\u80fd\u5411\u5f53\u524d\u8282\u70b9\u4ee5\u540e\u7684\u8282\u70b9\u63a8\u9001\u6d41\u91cf\uff0c\u6240\u4ee5\u4e3a\u4e86\u5c3d\u5feb\u5c06\u6d41\u91cf\u63a8\u9001\u56de \\(s\\) \uff0c\u6211\u4eec\u628a\u6240\u6709\u6bd4\u5f53\u524d\u8282\u70b9\u9ad8\u7684\u8282\u70b9\u9ad8\u5ea6\u53d8\u4e3a \\(n+1\\) \u3002 \u4f18\u5316\u540e\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2\\sqrt m)\\) \u4f8b\u9898 \u00b6 P3376 \u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41 \u7f51\u7edc\u6d41\u6a21\u677f\u3002 P3376 \u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41 \u53c2\u8003\u4ee3\u7801 \u7559\u5751 P4722 \u3010\u6a21\u677f\u3011\u6700\u5927\u6d41 \u52a0\u5f3a\u7248 / \u9884\u6d41\u63a8\u8fdb \u53ea\u6709\u7528 HLPP \u624d\u80fd\u8fc7\u3002 P4722 \u3010\u6a21\u677f\u3011\u6700\u5927\u6d41 \u52a0\u5f3a\u7248 / \u9884\u6d41\u63a8\u8fdb \u53c2\u8003\u4ee3\u7801\uff08\u4f7f\u7528 HLPP\uff09 \u90e8\u5206\u53c2\u8003 OI-Wiki \u4e0e P4722 \u9898\u89e3\uff0c\u56e0\u4e3a\u672c\u4eba\u5de8\u559c\u6b22\u7a7a\u884c\uff0c\u6838\u5fc3\u90e8\u5206\u5199\u4e86 65 \u884c\uff0c\u4e00\u5171 110 \u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 #include <iostream> #include <cstdio> #include <cstring> #include <algorithm> #include <vector> #include <queue> // stO OI-Wiki Orz #define il inline #define For(i,l,u) for(int i=(l);i<=(u);i++) #define RFor(i,l,u) for(int i=(u);i>=(l);i--) typedef long long ll ; const ll INF = 1145141919810000 ; using namespace std ; const int maxn = 2405 , maxm = 120005 ; namespace E { int f [ maxm * 2 ], t [ maxm * 2 ]; ll v [ maxm * 2 ]; int nxt [ maxm * 2 ], oth [ maxm * 2 ]; int tot , fst [ maxn ]; il int add ( int u_ , int v_ , ll w_ ){ // add edge ++ tot ; f [ tot ] = u_ , t [ tot ] = v_ , v [ tot ] = w_ , nxt [ tot ] = fst [ u_ ], fst [ u_ ] = tot ; return tot ; } il void addf ( int u , int v , ll w ){ // add edge and inverse edge int d1 = add ( u , v , w ), d2 = add ( v , u , 0 ); oth [ d1 ] = d2 ; oth [ d2 ] = d1 ; } } #define ForP(u,i) for(int i=E::fst[u];i;i=E::nxt[i]) namespace Flow { int n , m , s , t ; ll h [ maxn ], e [ maxn ], mxh ; int vis [ maxn ], gap [ maxn + 5 ]; vector < int > mp [ maxn + 5 ]; il void bfs ( int s ){ static queue < int > q ; while ( ! q . empty ()){ q . pop (); } q . push ( s ); h [ s ] = 0 ; vis [ s ] = 1 ; while ( ! q . empty ()){ int u = q . front (), v ; q . pop (); ForP ( u , i ){ if ( ! vis [ v = E :: t [ i ]] && E :: v [ E :: oth [ i ]]){ vis [ v ] = 1 ; h [ v ] = h [ u ] + 1 ; q . push ( v ); } } } } il ll push ( int u ){ bool init = u == s ; // good idea from OI-Wiki ForP ( u , i ){ int v = E :: t [ i ]; ll w = E :: v [ i ]; if ( w == 0 || ( ! init && h [ v ] != h [ u ] -1 ) ){ continue ; } ll sw = init ? w : min ( w , e [ u ]); // from OI-Wiki too if ( e [ v ] == 0 && v != s && v != t ){ mp [ h [ v ]]. push_back ( v ); mxh = max ( mxh , h [ v ]); } e [ u ] -= sw ; e [ v ] += sw ; E :: v [ i ] -= sw ; E :: v [ E :: oth [ i ]] += sw ; if ( e [ u ] == 0 ){ return 0 ; } } return e [ u ]; } il void relabel ( int u ){ h [ u ] = INF ; ForP ( u , i ){ if ( E :: v [ i ]){ h [ u ] = min ( h [ u ], h [ E :: t [ i ]]); } } if ( ++ h [ u ] < n ){ mp [ h [ u ]]. push_back ( u ); mxh = max ( mxh , h [ u ]); gap [ h [ u ]] ++ ; } } il int sel (){ while ( mp [ mxh ]. size () == 0 && mxh >= 0 ){ mxh -- ; } return mxh == -1 ? 0 : mp [ mxh ][ mp [ mxh ]. size () -1 ]; } il ll HLPP (){ For ( i , 1 , n ){ h [ i ] = INF ; } bfs ( t ); if ( h [ s ] == INF ){ return 0 ; } For ( i , 1 , n ){ if ( h [ i ] != INF ){ gap [ h [ i ]] ++ ;} } h [ s ] = n ; push ( s ); int u ; while ( u = sel ()){ // from OI-Wiki mp [ mxh ]. pop_back (); if ( push ( u )){ if (( -- gap [ h [ u ]]) == 0 ){ For ( i , 1 , n ){ if ( i != s && i != t && h [ u ] < h [ i ] && h [ i ] < n + 1 ){ h [ i ] = n + 1 ; } } } relabel ( u ); } } return e [ t ]; } } int n , m , s , t ; ll e [ 205 ][ 205 ]; int main (){ scanf ( \"%d%d%d%d\" , & n , & m , & s , & t ); Flow :: n = n ; Flow :: m = m ; Flow :: s = s ; Flow :: t = t ; for ( int i = 1 ; i <= m ; i ++ ){ int u , v ; ll w ; scanf ( \"%d%d%lld\" , & u , & v , & w ); e [ u ][ v ] += w ; } for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= n ; j ++ ){ if ( e [ i ][ j ]){ E :: addf ( i , j , e [ i ][ j ]); } } } printf ( \"%lld \\n \" , Flow :: HLPP ()); return 0 ; } \u5f88\u591a\u95ee\u9898\u90fd\u53ef\u4ee5\u8f6c\u5316\u4e3a\u7f51\u7edc\u6d41\u95ee\u9898\uff0c\u5efa\u8bae\u53c2\u8003 \u7f51\u7edc\u6d4124\u9898","title":"\u7f51\u7edc\u6d41"},{"location":"graph/network-flow/#_1","text":"\u7528\u6c34\u7ba1\u6765\u7c7b\u6bd4\uff1a \u81ea\u6765\u6c34\u5382\uff08\u6e90\u70b9\uff09\u8981\u7ecf\u8fc7\u6c34\u7ba1\uff08\u8fb9\uff09\u628a\u6c34\u8fd0\u5230\u77f3\u8001\u677f\u5bb6\uff08\u6c47\u70b9\uff09\u3002 \u6bcf\u6761\u5355\u5411\u6c34\u7ba1\u8fde\u63a5\u4e24\u4e2a\u7ad9\u70b9\uff0c\u6c34\u7ba1\u90fd\u6709\u4e00\u4e2a\u6700\u5927\u6d41\u91cf\uff0c\u6e90\u70b9\u6709\u65e0\u9650\u7684\u6c34\u3002\u663e\u7136\uff0c\u6bcf\u6761\u6c34\u7ba1\u53ef\u80fd\u6709\u6c34\u6d41\uff0c\u53ef\u80fd\u6ca1\u6709\u3002 \u95ee\uff1a\u81ea\u6765\u6c34\u5382 \u6700\u591a \u80fd\u7ed9\u77f3\u8001\u677f\u9001\u591a\u5c11\u6c34\uff1f","title":"\u7f51\u7edc\u6d41"},{"location":"graph/network-flow/#_2","text":"","title":"\u7f51\u7edc\u4e0e\u6d41"},{"location":"graph/network-flow/#_3","text":"\u7f51\u7edc \uff1a\u56fe\uff08\u4e00\u822c\u4e3a\u6709\u5411\u65e0\u91cd\u8fb9\uff09 \u5bb9\u91cf\u7f51\u7edc \uff1a\u8fb9\u6743\u4e3a\u8be5\u8fb9\u5bb9\u91cf\u7684\u7f51\u7edc \u6d41\u91cf\u7f51\u7edc \uff1a\u8fb9\u6743\u4e3a\u8be5\u8fb9\u5b9e\u9645\u6d41\u91cf\u7684\u7f51\u7edc \u5269\u4f59\u7f51\u7edc \uff1a\u5bb9\u91cf\u7f51\u7edc\u8fb9\u6743\u51cf\u53bb\u5269\u4f59\u7f51\u7edc\u5bf9\u5e94\u8fb9\u6743\u5f62\u6210\u7684\u7f51\u7edc \u6ee1\u6d41 \uff1a\u6d41\u91cf\u7f51\u7edc\u7684\u6d41\u91cf\u8fbe\u5230\u6700\u5927\uff08\u5373 \u6d41\u5165\u6c47\u70b9\u7684\u6d41\u91cf\u6700\u5927 \uff09 \u589e\u5e7f\u8def \uff1a\u5269\u4f59\u7f51\u7edc\u4e2d\u4ece\u6e90\u5230\u6c47\u4f7f\u8def\u5f84\u4e2d\u6700\u5c0f\u5269\u4f59\u8fb9\u6743\u4e0d\u4e3a\u96f6\u7684\u8def\u5f84 \u6e90 & \u6c47 \uff1a\u6240\u6709\u6d41\u91cf\u4ece\u6e90\u6d41\u51fa\uff0c\u6d41\u5165\u6c47\u70b9","title":"\u5b9a\u4e49"},{"location":"graph/network-flow/#_4","text":"\u5269\u4f59\u7f51\u7edc\u5728\u6ee1\u6d41\u65f6\u4e0d\u4f1a\u6709\u4e00\u6761\u589e\u5e7f\u8def \u82e5\u6ee1\u6d41\u65f6\u5269\u4f59\u7f51\u7edc\u4ecd\u6709\u589e\u5e7f\u8def\uff0c\u5219\u6cbf\u7740\u589e\u5e7f\u8def\u589e\u52a0\u6d41\u91cf\u603b\u80fd\u4f7f\u6700\u7ec8\u6d41\u91cf\u589e\u52a0 \u4efb\u4f55\u4e00\u4e2a\u5408\u6cd5\u7684\u6d41\u91cf\u7f51\u7edc\u4e2d\uff0c\u9664\u4e86\u6e90\u548c\u6c47\u5916\u7684\u6240\u6709\u8282\u70b9\uff0c\u6d41\u5165\u91cf\u4e4b\u548c\u7b49\u4e8e\u6d41\u51fa\u91cf\u4e4b\u548c \u76f4\u89c2\u7406\u89e3\uff1a\u6c34\u4e0d\u4f1a\u5728\u4e2d\u95f4\u8282\u70b9\u51ed\u7a7a\u4ea7\u751f\u6216\u6d88\u5931","title":"\u6027\u8d28"},{"location":"graph/network-flow/#_5","text":"","title":"\u5272"},{"location":"graph/network-flow/#_6","text":"\u7ed9\u5b9a\u4e00\u5f20\u56fe \\(G=\\{V,E\\}\\) \u548c\u6e90\u70b9 \\(A\\) \uff0c\u6c47\u70b9 \\(B\\) \u3002 \u5272\u96c6 \\(C(S,T)\\) \u88ab\u5b9a\u4e49\u4e3a \\(\\{(u,v) |u\\in S,v\\in T,(u,v)\\in E\\}\\) \u5373 \\(C(S,T)\\) \u4e3a\u7ed9\u5b9a \\(S,T\\) \u4e24\u70b9\u96c6\u95f4\u7684\u8fb9\u96c6 \u6700\u5c0f\u5272 \uff1a \u8fb9\u6743\u548c\u6700\u5c0f \u7684\u5272\u96c6 \\(C(S,T)\\) \uff0c\u4f7f \\(A\\in S,B\\in T\\) \u3002 \u5373\u82b1\u8d39\u6700\u5c0f\u4ee3\u4ef7\u628a\u6e90\u70b9\u5230\u6c47\u70b9\u7684\u6240\u6709\u8def\u5f84\u5207\u65ad\uff0c\u4f7f\u6e90\u70b9\u6c47\u70b9\u4e0d\u8fde\u901a\uff0c\u5207\u65ad\u4e00\u6761\u8fb9\u7684\u4ee3\u4ef7\u4e3a\u5b83\u7684\u8fb9\u6743\u3002","title":"\u5b9a\u4e49"},{"location":"graph/network-flow/#_7","text":"\u4e00\u4e2a\u6d41\u91cf\u7f51\u7edc\u7684\u6bcf\u4e00\u4e2a\u5272\u96c6\uff0c\u5bf9\u5e94\u7684\u6d41\u91cf\u548c\u90fd\u7b49\u4e8e\u603b\u6d41\u91cf \u4e00\u4e2a\u5f62\u8c61\u7684\u4f8b\u5b50\uff1a\u6050\u6016\u5206\u5b50\u5207\u65ad\u4e86\u82e5\u5e72\u6c34\u7ba1\uff0c\u4f7f\u539f\u6765\u6d41\u5411\u77f3\u8001\u677f\u5bb6\u7684\u6c34\u5168\u90e8\u6d41\u8d70\uff0c\u6700\u7ec8\u4ece\u88ab\u5207\u65ad\u6c34\u7ba1\u6d41\u51fa\u7684\u6c34\u91cf\u5c31\u662f\u539f\u6765\u6d41\u5411\u77f3\u8001\u677f\u5bb6\u7684\u6c34 \u540c\u4e00\u5f20\u56fe\u4e0a\uff0c\u6bcf\u4e00\u4e2a\u5272\u90fd\u5927\u4e8e\u7b49\u4e8e\u6bcf\u4e00\u4e2a\u6d41 \u8003\u8651\u4efb\u610f\u4e00\u4e2a\u5272\u96c6\u548c\u4efb\u610f\u4e00\u4e2a\u6d41\uff0c\u7531\u4e0a\u4e00\u6761\u6027\u8d28\u5f97\uff0c\u5272\u96c6\u5bf9\u5e94\u7684\u6d41\u91cf\u7b49\u4e8e\u603b\u6d41\u91cf\uff0c\u800c\u5272\u96c6\u5bf9\u5e94\u7684\u8fb9\u6743\u548c\u5927\u4e8e\u7b49\u4e8e\u8fb9\u6743\u5bf9\u5e94\u6d41\u91cf\uff08\u6bcf\u4e00\u6761\u8fb9\u7684\u6d41\u91cf\u5c0f\u4e8e\u7b49\u4e8e\u8fb9\u6743\uff09 \u6700\u5927\u6d41\u7b49\u4e8e\u6700\u5c0f\u5272 \u6ee1\u6d41\u65f6\uff0c\u6839\u636e\u589e\u5e7f\u8def\u7684\u6027\u8d28\uff0c\u5269\u4f59\u7f51\u7edc\u4e2d\u6e90\u70b9\u6c47\u70b9\u4e0d\u5b58\u5728\u6700\u5c0f\u5269\u4f59\u8fb9\u6743\u4e0d\u4e3a\u96f6\u7684\u8def\u5f84\u3002 \u65ad\u5f00\u6240\u6709\u5269\u4f59\u6d41\u91cf\u4e3a\u96f6\u7684\u8fb9 \uff0c\u53e6 \\(S\\) \u4e3a\u6240\u6709\u4e0e\u6e90\u70b9\u8fde\u901a\u7684\u70b9\u96c6\uff0c \\(T=V-S\\) \uff0c\u5219\u5272\u96c6 \\(C(S,T)\\) \u5305\u542b\u7684\u6240\u6709\u8fb9 \u5269\u4f59\u6d41\u91cf \u4e3a0\uff0c\u5373 \u6d41\u91cf\u7b49\u4e8e\u5bb9\u91cf \u3002\u7531\u6b64\u5f97 \\(C(S,T)\\) \u7684\u8fb9\u6743\u548c\u4e3a\u6700\u5927\u6d41\u7684\u6d41\u91cf\u3002\u7531\u4e0a\u4e00\u6761\u6027\u8d28\u5f97\uff0c \\(C(S,T)\\) \u4e3a\u6700\u5c0f\u5272\u3002\u7efc\u4e0a\uff0c\u6700\u5927\u6d41\u7b49\u4e8e\u6700\u5c0f\u5272\u3002","title":"\u6027\u8d28"},{"location":"graph/network-flow/#_8","text":"\u90e8\u5206\u5f15\u81ea OI-Wiki \u8fd9\u91cc\u4ecb\u7ecd\u4ee5\u4e0b\u7b97\u6cd5\uff1a Edmonds-Karp ISAP \u9884\u6d41\u63a8\u8fdb & HLPP \u5c0f\u8d34\u58eb \u8003\u573a\u4e0a\uff0c\u5c3d\u91cf\u4f7f\u7528\u6bd4\u8f83\u597d\u5199\u7684 Dinic \u6216 ISAP \uff0c\u8fd9\u4e24\u4e2a\u7b97\u6cd5\u867d\u7136\u6bd4 HLPP \u7406\u8bba\u590d\u6742\u5ea6\u9ad8\uff0c\u4f46\u8db3\u4ee5\u89e3\u51b3\u7edd\u5927\u591a\u6570\u95ee\u9898\uff0c\u800c\u4e14\u597d\u5199\u3002","title":"\u6c42\u6700\u5927\u6d41"},{"location":"graph/network-flow/#edmonds-karp","text":"\u7531\u4e8e\u6700\u5927\u6d41\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u5bfb\u627e\u589e\u5e7f\u8def","title":"Edmonds-Karp"},{"location":"graph/network-flow/#isap","text":"","title":"ISAP"},{"location":"graph/network-flow/#hlpp","text":"\u524d\u9762\u7684\u7b97\u6cd5\u90fd\u57fa\u4e8e\u5bfb\u627e\u589e\u5e7f\u8def\u6765\u6c42\u89e3\u6700\u5927\u6d41\uff0c\u8fd9\u91cc\u518d\u8bb2\u4e00\u4e9b\u4e0d\u57fa\u4e8e\u589e\u5e7f\u8def\u7684\u7b97\u6cd5\u3002 \u9884\u6d41\u63a8\u8fdb\u7684\u6838\u5fc3\u5728\u4e8e\u5141\u8bb8\u8282\u70b9\u7684\u6d41\u5165\u5927\u4e8e\u6d41\u51fa\u3002\u6211\u4eec\u628a\u5141\u8bb8\u6d41\u5165\u5927\u4e8e\u6d41\u51fa\u7684\u7f51\u7edc\u79f0\u4e3a\u9884\u6d41\u3002 \u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5\u7ef4\u62a4\u6bcf\u4e2a\u7ed3\u70b9\u7684\u9ad8\u5ea6 \\(h(u)\\) \uff0c\u5e76\u4e14\u89c4\u5b9a\u6ea2\u51fa\u7684\u7ed3\u70b9 \\(u\\) \u5982\u679c\u8981\u63a8\u9001\u8d85\u989d\u6d41\uff0c\u53ea\u80fd\u5411\u9ad8\u5ea6\u5c0f\u4e8e \\(u\\) \u7684\u7ed3\u70b9\u63a8\u9001\uff1b\u5982\u679c \\(u\\) \u6ca1\u6709\u76f8\u90bb\u7684\u9ad8\u5ea6\u5c0f\u4e8e \\(u\\) \u7684\u7ed3\u70b9\uff0c\u5c31\u589e\u52a0 \\(u\\) \u7684\u9ad8\u5ea6\uff08\u91cd\u8d34\u6807\u7b7e\uff09\u3002 \u521d\u59cb\u5316\u65f6\uff0c \\(h(s)=n,h(other)=0\\) \uff0c\u5e76\u6cbf\u8fb9\u63a8\u9001\u8d77\u59cb\u8282\u70b9\u6d41\u91cf\u3002 \u6700\u9ad8\u6807\u53f7\u9884\u6d41\u63a8\u8fdb\u7b97\u6cd5 ( HLPP ) \u4e0e\u9884\u6d41\u63a8\u8fdb\u7684\u533a\u522b\u5728\u4e8e\uff0c\u5728\u9884\u6d41\u63a8\u8fdb\u65f6\uff0c HLPP \u4f1a\u4f18\u5148\u63a8\u9001\u9ad8\u5ea6\u5927\u7684\u8282\u70b9\u7684\u6d41\u91cf\u3002\u4e3a\u4e86\u5728\u968f\u673a\u56fe\u4e0a\u8dd1\u51fa\u63a5\u8fd1 Dinic \u901f\u5ea6\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u5bf9 HLPP \u8fdb\u884c\u5982\u4e0b\u4f18\u5316\uff1a \u5c06 \\(h(u)\\) \u521d\u59cb\u5316\u4e3a \\(dis(u,t)\\) \uff0c\u5c06 \\(h(s)\\) \u4ecd\u521d\u59cb\u5316\u4e3a \\(n\\) \u3002\u7528 BFS \u6c42\u51fa \\(dis(u,t)\\) \uff0c\u5373\u53ef\u51cf\u5c11\u5927\u91cf\u91cd\u8d34\u6807\u7b7e\u64cd\u4f5c\u3002 \u7528\u6876\u4ee3\u66ff\u4f18\u5148\u961f\u5217\uff0c\u590d\u6742\u5ea6\u964d\u4f4e\u4e00\u4e2a \\(\\log\\) \u3002 \u56e0\u4e3a\u6bcf\u6b21\u53d6\u51fa\u7684\u662f\u6700\u9ad8\u8282\u70b9\uff0c\u800c\u91cd\u8d34\u6807\u7b7e\u53c8\u53ea\u4f1a\u589e\u52a0\u5f53\u524d\u8282\u70b9\u9ad8\u5ea6\uff0c\u6240\u4ee5\u5982\u679c\u5f53\u524d\u8282\u70b9\u9ad8\u5ea6\u4e0a\u6ca1\u6709\u5176\u4ed6\u8282\u70b9\uff0c\u6bd4\u5f53\u524d\u8282\u70b9\u9ad8\u7684\u6240\u6709\u8282\u70b9\u90fd\u4e0d\u53ef\u80fd\u5411\u5f53\u524d\u8282\u70b9\u4ee5\u540e\u7684\u8282\u70b9\u63a8\u9001\u6d41\u91cf\uff0c\u6240\u4ee5\u4e3a\u4e86\u5c3d\u5feb\u5c06\u6d41\u91cf\u63a8\u9001\u56de \\(s\\) \uff0c\u6211\u4eec\u628a\u6240\u6709\u6bd4\u5f53\u524d\u8282\u70b9\u9ad8\u7684\u8282\u70b9\u9ad8\u5ea6\u53d8\u4e3a \\(n+1\\) \u3002 \u4f18\u5316\u540e\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \\(O(n^2\\sqrt m)\\)","title":"\u9884\u6d41\u63a8\u8fdb &amp; HLPP"},{"location":"graph/network-flow/#_9","text":"P3376 \u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41 \u7f51\u7edc\u6d41\u6a21\u677f\u3002 P3376 \u3010\u6a21\u677f\u3011\u7f51\u7edc\u6700\u5927\u6d41 \u53c2\u8003\u4ee3\u7801 \u7559\u5751 P4722 \u3010\u6a21\u677f\u3011\u6700\u5927\u6d41 \u52a0\u5f3a\u7248 / \u9884\u6d41\u63a8\u8fdb \u53ea\u6709\u7528 HLPP \u624d\u80fd\u8fc7\u3002 P4722 \u3010\u6a21\u677f\u3011\u6700\u5927\u6d41 \u52a0\u5f3a\u7248 / \u9884\u6d41\u63a8\u8fdb \u53c2\u8003\u4ee3\u7801\uff08\u4f7f\u7528 HLPP\uff09 \u90e8\u5206\u53c2\u8003 OI-Wiki \u4e0e P4722 \u9898\u89e3\uff0c\u56e0\u4e3a\u672c\u4eba\u5de8\u559c\u6b22\u7a7a\u884c\uff0c\u6838\u5fc3\u90e8\u5206\u5199\u4e86 65 \u884c\uff0c\u4e00\u5171 110 \u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 #include <iostream> #include <cstdio> #include <cstring> #include <algorithm> #include <vector> #include <queue> // stO OI-Wiki Orz #define il inline #define For(i,l,u) for(int i=(l);i<=(u);i++) #define RFor(i,l,u) for(int i=(u);i>=(l);i--) typedef long long ll ; const ll INF = 1145141919810000 ; using namespace std ; const int maxn = 2405 , maxm = 120005 ; namespace E { int f [ maxm * 2 ], t [ maxm * 2 ]; ll v [ maxm * 2 ]; int nxt [ maxm * 2 ], oth [ maxm * 2 ]; int tot , fst [ maxn ]; il int add ( int u_ , int v_ , ll w_ ){ // add edge ++ tot ; f [ tot ] = u_ , t [ tot ] = v_ , v [ tot ] = w_ , nxt [ tot ] = fst [ u_ ], fst [ u_ ] = tot ; return tot ; } il void addf ( int u , int v , ll w ){ // add edge and inverse edge int d1 = add ( u , v , w ), d2 = add ( v , u , 0 ); oth [ d1 ] = d2 ; oth [ d2 ] = d1 ; } } #define ForP(u,i) for(int i=E::fst[u];i;i=E::nxt[i]) namespace Flow { int n , m , s , t ; ll h [ maxn ], e [ maxn ], mxh ; int vis [ maxn ], gap [ maxn + 5 ]; vector < int > mp [ maxn + 5 ]; il void bfs ( int s ){ static queue < int > q ; while ( ! q . empty ()){ q . pop (); } q . push ( s ); h [ s ] = 0 ; vis [ s ] = 1 ; while ( ! q . empty ()){ int u = q . front (), v ; q . pop (); ForP ( u , i ){ if ( ! vis [ v = E :: t [ i ]] && E :: v [ E :: oth [ i ]]){ vis [ v ] = 1 ; h [ v ] = h [ u ] + 1 ; q . push ( v ); } } } } il ll push ( int u ){ bool init = u == s ; // good idea from OI-Wiki ForP ( u , i ){ int v = E :: t [ i ]; ll w = E :: v [ i ]; if ( w == 0 || ( ! init && h [ v ] != h [ u ] -1 ) ){ continue ; } ll sw = init ? w : min ( w , e [ u ]); // from OI-Wiki too if ( e [ v ] == 0 && v != s && v != t ){ mp [ h [ v ]]. push_back ( v ); mxh = max ( mxh , h [ v ]); } e [ u ] -= sw ; e [ v ] += sw ; E :: v [ i ] -= sw ; E :: v [ E :: oth [ i ]] += sw ; if ( e [ u ] == 0 ){ return 0 ; } } return e [ u ]; } il void relabel ( int u ){ h [ u ] = INF ; ForP ( u , i ){ if ( E :: v [ i ]){ h [ u ] = min ( h [ u ], h [ E :: t [ i ]]); } } if ( ++ h [ u ] < n ){ mp [ h [ u ]]. push_back ( u ); mxh = max ( mxh , h [ u ]); gap [ h [ u ]] ++ ; } } il int sel (){ while ( mp [ mxh ]. size () == 0 && mxh >= 0 ){ mxh -- ; } return mxh == -1 ? 0 : mp [ mxh ][ mp [ mxh ]. size () -1 ]; } il ll HLPP (){ For ( i , 1 , n ){ h [ i ] = INF ; } bfs ( t ); if ( h [ s ] == INF ){ return 0 ; } For ( i , 1 , n ){ if ( h [ i ] != INF ){ gap [ h [ i ]] ++ ;} } h [ s ] = n ; push ( s ); int u ; while ( u = sel ()){ // from OI-Wiki mp [ mxh ]. pop_back (); if ( push ( u )){ if (( -- gap [ h [ u ]]) == 0 ){ For ( i , 1 , n ){ if ( i != s && i != t && h [ u ] < h [ i ] && h [ i ] < n + 1 ){ h [ i ] = n + 1 ; } } } relabel ( u ); } } return e [ t ]; } } int n , m , s , t ; ll e [ 205 ][ 205 ]; int main (){ scanf ( \"%d%d%d%d\" , & n , & m , & s , & t ); Flow :: n = n ; Flow :: m = m ; Flow :: s = s ; Flow :: t = t ; for ( int i = 1 ; i <= m ; i ++ ){ int u , v ; ll w ; scanf ( \"%d%d%lld\" , & u , & v , & w ); e [ u ][ v ] += w ; } for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = 1 ; j <= n ; j ++ ){ if ( e [ i ][ j ]){ E :: addf ( i , j , e [ i ][ j ]); } } } printf ( \"%lld \\n \" , Flow :: HLPP ()); return 0 ; } \u5f88\u591a\u95ee\u9898\u90fd\u53ef\u4ee5\u8f6c\u5316\u4e3a\u7f51\u7edc\u6d41\u95ee\u9898\uff0c\u5efa\u8bae\u53c2\u8003 \u7f51\u7edc\u6d4124\u9898","title":"\u4f8b\u9898"},{"location":"solution/P2934/","tags":["\u9898\u89e3","\u6700\u77ed\u8def\u6811","\u5e76\u67e5\u96c6"],"text":"P2934 [USACO09JAN] Safe Travel G \u00b6 \u9898\u76ee \u6b63\u5f0f\u5f00\u59cb\u8bb2\u89e3 \u00b6 \u9898\u610f\uff1a\u6c42\u5728\u4e0d\u7ecf\u8fc7\u539f\u6765 \\(1\\) \u8282\u70b9\u5230 \\(i\\) \u8282\u70b9\u6700\u77ed\u8def\u4e0a\u6700\u540e\u4e00\u6761\u8fb9\u7684\u524d\u63d0\u4e0b\uff0c \\(1\\) \u8282\u70b9\u5230 \\(i\\) \u8282\u70b9\u7684\u6700\u77ed\u8def\u3002 \u6ce8\u610f \u5220\u9664\u4e0a\u4e00\u6761\u8fb9\u540e\u5982\u679c \\(1\\) \u53f7\u8282\u70b9\u4e0d\u80fd\u5230\u8fbe \\(i\\) \uff0c\u8f93\u51fa \\(-1\\) \u7ffb\u8bd1\u8fd9\u9053\u9898\u7684\u4eba\u6f0f\u4e86\u597d\u591a\u8981\u7d20 \u6837\u4f8b\u7684\u56fe\u753b\u51fa\u6765\u662f\u8fd9\u6837\uff1a \u65e2\u7136\u6700\u77ed\u8def\u552f\u4e00\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55 \\(1\\) \u8282\u70b9\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u7684\u6700\u540e\u4e00\u6761\u8fb9\u7684\u8d77\u70b9\uff0c\u4e5f\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u677e\u5f1b\u5b83\u7684\u8282\u70b9\uff0c\u4f5c\u4e3a\u5b83\u7684\u7236\u4eb2\uff0c\u6784\u9020\u51fa\u4e00\u68f5\u6839\u4e3a \\(1\\) \u53f7\u8282\u70b9\u7684 \u6700\u77ed\u8def\u6811 \u3002\u56e0\u4e3a\u6700\u77ed\u8def\u552f\u4e00\uff0c\u6700\u77ed\u8def\u6811\u4e5f\u662f\u552f\u4e00\u7684\u3002 \u7531\u6837\u4f8b\u6784\u9020\u51fa\u7684\u6700\u77ed\u8def\u6811\u662f\u8fd9\u6837\u7684\uff1a \u7ea2\u8272\u8fb9\u4e3a\u6700\u77ed\u8def\u6811\u4e0a\u7684\u8fb9\uff0c\u9ed1\u8272\u8fb9\u4e0d\u5c5e\u4e8e\u6700\u77ed\u8def\u6811\uff0c\u6211\u4eec\u5c06\u4e0d\u5c5e\u4e8e\u6700\u77ed\u8def\u6811\u7684\u8fb9\u79f0\u4e3a \u975e\u6811\u8fb9 \u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u628a\u6811\u8fb9\u6807\u8bb0\u4e3a\u7ea2\u8272\uff0c\u975e\u6811\u8fb9\u4e3a\u9ed1\u8272\u3002 \u9898\u76ee\u6c42\u7684\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u5728\u4e0d\u7ecf\u8fc7\u6700\u77ed\u8def\u6811\u4e0a \\(i\\) \u8282\u70b9\u5230\u5b83\u7236\u4eb2\u7684\u8fb9\u7684\u524d\u63d0\u4e0b\uff0c \\(1\\) \u8282\u70b9\u5230 \\(i\\) \u8282\u70b9\u7684\u6700\u77ed\u8def\uff0c\u4e3a\u65b9\u4fbf\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e3a \u6700\u597d\u8def\u5f84 \u3002 \u5f88\u663e\u7136\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u65ad\u5f00\u8fb9\u91cd\u6784\u6700\u77ed\u8def\u6811\u7684\u8bdd\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u8dd1\u4e86 \\(n\\) \u904d\u6700\u77ed\u8def\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2\\log n)\\) \u3002 \u6839\u636e\u6700\u77ed\u8def\u6811\u7684\u6027\u8d28\uff0c\u5728\u65ad\u5f00 \\(i\\) \u8282\u70b9\u5230\u5b83\u7236\u4eb2\u7684\u8fb9\u540e\uff0c\u6700\u77ed\u8def\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u81f3\u5c11\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u800c\u4e14 \u4ec5\u7ecf\u8fc7\u4e00\u6761\u975e\u6811\u8fb9 \uff0c\u56e0\u4e3a\u5982\u679c\u8be5\u8def\u5f84\u7ecf\u8fc7\u591a\u6761\u975e\u6811\u8fb9\uff0c\u90a3\u4e48\u603b\u6709\u4e00\u6761\u975e\u6811\u8fb9\u53ef\u4ee5\u7528\u6700\u77ed\u8def\u6811\u4e0a\u7684\u4e00\u6761\u4e0d\u5305\u542b\u88ab\u65ad\u5f00\u8fb9\u7684\u94fe\u66ff\u4ee3\u3002 \u56e0\u6b64\uff0c\u65ad\u5f00\u8fb9\u540e\uff0c \\(1\\) \u8282\u70b9\u5230 \\(i\\) \u8282\u70b9\u7684\u6ee1\u8db3\u8981\u6c42\u7684\u6700\u77ed\u8def\u4e00\u5b9a\u662f \u6811\u4e0a\u8def\u5f84-->\u975e\u6811\u8fb9-->\u6811\u4e0a\u8def\u5f84 \u7684\u5f62\u5f0f\u3002 \u6211\u4eec\u505a\u5982\u4e0b\u5b9a\u4e49\uff1a \\(d_i\\) \u8868\u793a \\(1\\) \u5230 \\(i\\) \u7684\u6700\u77ed\u8def\u957f\u5ea6 \\(ans_i\\) \u8868\u793a \\(1\\) \u5230 \\(i\\) \u7684\u6700\u597d\u8def\u5f84\u957f\u5ea6 \\(L(u,v)\\) \u8868\u793a \u6700\u77ed\u8def\u6811\u4e0a \\(u\\) \u548c \\(v\\) \u7684 LCA \\(w_{u,v}\\) \u8868\u793a \\(u\\) \u5230 \\(v\\) \u7684\u8fb9\u6743 \u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u6362\u4e00\u4e2a\u89d2\u5ea6\uff0c\u679a\u4e3e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u8003\u8651\u6709\u54ea\u4e9b\u8282\u70b9\u5230\u6e90\u70b9\u7684\u201c\u6700\u597d\u8def\u5f84\u201d\u53ef\u80fd\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u3002\u7ecf\u8fc7\u4e00\u4e9b\u8003\u8651\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u8fb9 \\((u,v)\\) \uff0c\u4e00\u4e2a\u8282\u70b9 \\(i\\) \u5230 \\(1\\) \u7684\u6700\u597d\u8def\u5f84\u53ef\u80fd\u7ecf\u8fc7\u5b83\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(i\\) \u662f \\(L(u,v)\\) \u7684\u540e\u4ee3\u4e14\u662f \\(u\\) \u6216 \\(v\\) \u7684\u7956\u5148\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 \\(i\\) \uff0c \\(ans_i=\\min\\limits_{u,v}{(d_v+w_{u,v}+d_u-d_i)}\\) \u56e0\u4e3a \\(d_i\\) \u4e0d\u53d8\uff0c\u6240\u4ee5 \\(d_v+w_{u,v}+d_u-d_i\\) \u53d6\u5f97\u6700\u5c0f\u503c\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(d_v+w_{u,v}+d_u\\) \u53d6\u5f97\u6700\u5c0f\u503c\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u5c06\u975e\u6811\u8fb9 \\((u,v)\\) \u6309 \\(d_u+w_{u,v}+d_v\\) \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u518d\u679a\u4e3e\u8fd9\u6761\u8fb9\u80fd\u66f4\u65b0\u7684\u70b9\uff0c\u90a3\u4e48\u6bcf\u4e2a\u70b9\u7b2c\u4e00\u6b21\u88ab\u66f4\u65b0\u65f6\u7684 \\(ans_i\\) \u5c31\u662f\u6700\u7ec8\u7b54\u6848\u3002\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u66f4\u65b0\u5b8c\u5c31\u5c06\u8fd9\u4e2a\u70b9\u5220\u9664\uff0c\u6b63\u786e\u6027\u4ecd\u4fdd\u8bc1\u3002\u7528\u5e76\u67e5\u96c6\u7f29\u70b9\u89e3\u51b3\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n\\log n+m\\log m)\\) \u53c2\u8003\u7a0b\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 #include <iostream> #include <cstdio> #include <cstring> #include <algorithm> #include <queue> using namespace std ; typedef long long ll ; typedef pair < ll , int > pr ; int n , m ; struct edge { int v ; ll w ; edge (){} edge ( int v_ , ll w_ ){ v = v_ , w = w_ ; } }; vector < edge > e [ 100005 ]; ll d [ 100005 ]; int fa [ 100005 ][ 30 ], dep [ 100005 ]; priority_queue < pr > q ; void dijkstra (){ while ( ! q . empty ()){ q . pop (); } for ( int i = 1 ; i <= n ; i ++ ){ d [ i ] = -1 ; } d [ 1 ] = 0 ; q . push ( make_pair ( 0 , 1 )); while ( ! q . empty ()){ pr nw = q . top (); q . pop (); int u = nw . second ; for ( int i = e [ u ]. size () -1 ; i >= 0 ; i -- ){ int v = e [ u ][ i ]. v ; ll w = e [ u ][ i ]. w ; if ( d [ v ] == -1 || d [ v ] > d [ u ] + w ){ d [ v ] = d [ u ] + w ; fa [ v ][ 0 ] = u ; dep [ v ] = dep [ u ] + 1 ; q . push ( make_pair ( - d [ v ], v )); } } } } void init (){ for ( int j = 1 ; j <= 25 ; j ++ ){ for ( int i = 1 ; i <= n ; i ++ ){ fa [ i ][ j ] = fa [ fa [ i ][ j -1 ]][ j -1 ]; } } } int lca ( int u , int v ){ if ( dep [ v ] > dep [ u ]){ swap ( u , v ); } for ( int i = 25 ; i >= 0 ; i -- ) if ( dep [ fa [ u ][ i ]] >= dep [ v ]) u = fa [ u ][ i ]; for ( int i = 25 ; i >= 0 ; i -- ) if ( fa [ u ][ i ] != fa [ v ][ i ]){ u = fa [ u ][ i ]; v = fa [ v ][ i ]; } return fa [ u ][ 0 ]; } struct nont { int u , v ; ll w ; nont (){} nont ( int u_ , int v_ , ll w_ ){ u = u_ , v = v_ , w = w_ ; } }; bool operator < ( nont a , nont b ){ return d [ a . u ] + d [ a . v ] + a . w < d [ b . u ] + d [ b . v ] + b . w ; } nont nt [ 200005 ]; int tp = 0 ; ll ans [ 100005 ]; int nx [ 100005 ]; int getfa ( int u ){ return ( u == nx [ u ]) ? u : ( nx [ u ] = getfa ( nx [ u ])); } int main (){ scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m ; i ++ ){ int a , b ; ll t ; scanf ( \"%d%d%lld\" , & a , & b , & t ); e [ a ]. push_back ( edge ( b , t )); e [ b ]. push_back ( edge ( a , t )); } dijkstra (); init (); for ( int i = 1 ; i <= n ; i ++ ){ ans [ i ] = -1 ; // \u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u8def\u5f84\u4e00\u5b9a\u8981\u8f93\u51fa -1 \u5426\u5219 100Pts -> 40Pts nx [ i ] = i ; for ( int j = e [ i ]. size () -1 ; j >= 0 ; j -- ){ int u = i , v = e [ i ][ j ]. v ; ll w = e [ i ][ j ]. w ; if ( fa [ v ][ 0 ] != u && fa [ u ][ 0 ] != v && u < v ){ nt [ ++ tp ] = nont ( u , v , w ); } } } sort ( nt + 1 , nt + tp + 1 ); for ( int i = 1 ; i <= tp ; i ++ ){ int x = nt [ i ]. u , y = nt [ i ]. v ; ll kw = d [ x ] + d [ y ] + nt [ i ]. w ; int u = getfa ( x ), v = getfa ( y ); while ( u != v ){ if ( dep [ u ] < dep [ v ]){ swap ( u , v ); } ans [ u ] = kw - d [ u ]; nx [ u ] = fa [ u ][ 0 ]; u = getfa ( u ); } } for ( int i = 2 ; i <= n ; i ++ ){ printf ( \"%lld \\n \" , ans [ i ]); } return 0 ; }","title":"P2934 Safe Travel G"},{"location":"solution/P2934/#p2934-usaco09jan-safe-travel-g","text":"\u9898\u76ee","title":"P2934 [USACO09JAN] Safe Travel G"},{"location":"solution/P2934/#_1","text":"\u9898\u610f\uff1a\u6c42\u5728\u4e0d\u7ecf\u8fc7\u539f\u6765 \\(1\\) \u8282\u70b9\u5230 \\(i\\) \u8282\u70b9\u6700\u77ed\u8def\u4e0a\u6700\u540e\u4e00\u6761\u8fb9\u7684\u524d\u63d0\u4e0b\uff0c \\(1\\) \u8282\u70b9\u5230 \\(i\\) \u8282\u70b9\u7684\u6700\u77ed\u8def\u3002 \u6ce8\u610f \u5220\u9664\u4e0a\u4e00\u6761\u8fb9\u540e\u5982\u679c \\(1\\) \u53f7\u8282\u70b9\u4e0d\u80fd\u5230\u8fbe \\(i\\) \uff0c\u8f93\u51fa \\(-1\\) \u7ffb\u8bd1\u8fd9\u9053\u9898\u7684\u4eba\u6f0f\u4e86\u597d\u591a\u8981\u7d20 \u6837\u4f8b\u7684\u56fe\u753b\u51fa\u6765\u662f\u8fd9\u6837\uff1a \u65e2\u7136\u6700\u77ed\u8def\u552f\u4e00\uff0c\u6211\u4eec\u53ef\u4ee5\u8bb0\u5f55 \\(1\\) \u8282\u70b9\u5230\u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u77ed\u8def\u7684\u6700\u540e\u4e00\u6761\u8fb9\u7684\u8d77\u70b9\uff0c\u4e5f\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u677e\u5f1b\u5b83\u7684\u8282\u70b9\uff0c\u4f5c\u4e3a\u5b83\u7684\u7236\u4eb2\uff0c\u6784\u9020\u51fa\u4e00\u68f5\u6839\u4e3a \\(1\\) \u53f7\u8282\u70b9\u7684 \u6700\u77ed\u8def\u6811 \u3002\u56e0\u4e3a\u6700\u77ed\u8def\u552f\u4e00\uff0c\u6700\u77ed\u8def\u6811\u4e5f\u662f\u552f\u4e00\u7684\u3002 \u7531\u6837\u4f8b\u6784\u9020\u51fa\u7684\u6700\u77ed\u8def\u6811\u662f\u8fd9\u6837\u7684\uff1a \u7ea2\u8272\u8fb9\u4e3a\u6700\u77ed\u8def\u6811\u4e0a\u7684\u8fb9\uff0c\u9ed1\u8272\u8fb9\u4e0d\u5c5e\u4e8e\u6700\u77ed\u8def\u6811\uff0c\u6211\u4eec\u5c06\u4e0d\u5c5e\u4e8e\u6700\u77ed\u8def\u6811\u7684\u8fb9\u79f0\u4e3a \u975e\u6811\u8fb9 \u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u628a\u6811\u8fb9\u6807\u8bb0\u4e3a\u7ea2\u8272\uff0c\u975e\u6811\u8fb9\u4e3a\u9ed1\u8272\u3002 \u9898\u76ee\u6c42\u7684\u8def\u5f84\uff0c\u4e5f\u5c31\u662f\u5728\u4e0d\u7ecf\u8fc7\u6700\u77ed\u8def\u6811\u4e0a \\(i\\) \u8282\u70b9\u5230\u5b83\u7236\u4eb2\u7684\u8fb9\u7684\u524d\u63d0\u4e0b\uff0c \\(1\\) \u8282\u70b9\u5230 \\(i\\) \u8282\u70b9\u7684\u6700\u77ed\u8def\uff0c\u4e3a\u65b9\u4fbf\uff0c\u6211\u4eec\u5c06\u5176\u79f0\u4e3a \u6700\u597d\u8def\u5f84 \u3002 \u5f88\u663e\u7136\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u65ad\u5f00\u8fb9\u91cd\u6784\u6700\u77ed\u8def\u6811\u7684\u8bdd\uff0c\u672c\u8d28\u4e0a\u5c31\u662f\u8dd1\u4e86 \\(n\\) \u904d\u6700\u77ed\u8def\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2\\log n)\\) \u3002 \u6839\u636e\u6700\u77ed\u8def\u6811\u7684\u6027\u8d28\uff0c\u5728\u65ad\u5f00 \\(i\\) \u8282\u70b9\u5230\u5b83\u7236\u4eb2\u7684\u8fb9\u540e\uff0c\u6700\u77ed\u8def\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u81f3\u5c11\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u800c\u4e14 \u4ec5\u7ecf\u8fc7\u4e00\u6761\u975e\u6811\u8fb9 \uff0c\u56e0\u4e3a\u5982\u679c\u8be5\u8def\u5f84\u7ecf\u8fc7\u591a\u6761\u975e\u6811\u8fb9\uff0c\u90a3\u4e48\u603b\u6709\u4e00\u6761\u975e\u6811\u8fb9\u53ef\u4ee5\u7528\u6700\u77ed\u8def\u6811\u4e0a\u7684\u4e00\u6761\u4e0d\u5305\u542b\u88ab\u65ad\u5f00\u8fb9\u7684\u94fe\u66ff\u4ee3\u3002 \u56e0\u6b64\uff0c\u65ad\u5f00\u8fb9\u540e\uff0c \\(1\\) \u8282\u70b9\u5230 \\(i\\) \u8282\u70b9\u7684\u6ee1\u8db3\u8981\u6c42\u7684\u6700\u77ed\u8def\u4e00\u5b9a\u662f \u6811\u4e0a\u8def\u5f84-->\u975e\u6811\u8fb9-->\u6811\u4e0a\u8def\u5f84 \u7684\u5f62\u5f0f\u3002 \u6211\u4eec\u505a\u5982\u4e0b\u5b9a\u4e49\uff1a \\(d_i\\) \u8868\u793a \\(1\\) \u5230 \\(i\\) \u7684\u6700\u77ed\u8def\u957f\u5ea6 \\(ans_i\\) \u8868\u793a \\(1\\) \u5230 \\(i\\) \u7684\u6700\u597d\u8def\u5f84\u957f\u5ea6 \\(L(u,v)\\) \u8868\u793a \u6700\u77ed\u8def\u6811\u4e0a \\(u\\) \u548c \\(v\\) \u7684 LCA \\(w_{u,v}\\) \u8868\u793a \\(u\\) \u5230 \\(v\\) \u7684\u8fb9\u6743 \u90a3\u4e48\u6211\u4eec\u4e0d\u59a8\u6362\u4e00\u4e2a\u89d2\u5ea6\uff0c\u679a\u4e3e\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\uff0c\u8003\u8651\u6709\u54ea\u4e9b\u8282\u70b9\u5230\u6e90\u70b9\u7684\u201c\u6700\u597d\u8def\u5f84\u201d\u53ef\u80fd\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u3002\u7ecf\u8fc7\u4e00\u4e9b\u8003\u8651\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u8fb9 \\((u,v)\\) \uff0c\u4e00\u4e2a\u8282\u70b9 \\(i\\) \u5230 \\(1\\) \u7684\u6700\u597d\u8def\u5f84\u53ef\u80fd\u7ecf\u8fc7\u5b83\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(i\\) \u662f \\(L(u,v)\\) \u7684\u540e\u4ee3\u4e14\u662f \\(u\\) \u6216 \\(v\\) \u7684\u7956\u5148\u3002 \u56e0\u6b64\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 \\(i\\) \uff0c \\(ans_i=\\min\\limits_{u,v}{(d_v+w_{u,v}+d_u-d_i)}\\) \u56e0\u4e3a \\(d_i\\) \u4e0d\u53d8\uff0c\u6240\u4ee5 \\(d_v+w_{u,v}+d_u-d_i\\) \u53d6\u5f97\u6700\u5c0f\u503c\uff0c\u5f53\u4e14\u4ec5\u5f53 \\(d_v+w_{u,v}+d_u\\) \u53d6\u5f97\u6700\u5c0f\u503c\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u5c06\u975e\u6811\u8fb9 \\((u,v)\\) \u6309 \\(d_u+w_{u,v}+d_v\\) \u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u518d\u679a\u4e3e\u8fd9\u6761\u8fb9\u80fd\u66f4\u65b0\u7684\u70b9\uff0c\u90a3\u4e48\u6bcf\u4e2a\u70b9\u7b2c\u4e00\u6b21\u88ab\u66f4\u65b0\u65f6\u7684 \\(ans_i\\) \u5c31\u662f\u6700\u7ec8\u7b54\u6848\u3002\u90a3\u4e48\u6211\u4eec\u6bcf\u6b21\u66f4\u65b0\u5b8c\u5c31\u5c06\u8fd9\u4e2a\u70b9\u5220\u9664\uff0c\u6b63\u786e\u6027\u4ecd\u4fdd\u8bc1\u3002\u7528\u5e76\u67e5\u96c6\u7f29\u70b9\u89e3\u51b3\u5373\u53ef\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a \\(O(n\\log n+m\\log m)\\) \u53c2\u8003\u7a0b\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 #include <iostream> #include <cstdio> #include <cstring> #include <algorithm> #include <queue> using namespace std ; typedef long long ll ; typedef pair < ll , int > pr ; int n , m ; struct edge { int v ; ll w ; edge (){} edge ( int v_ , ll w_ ){ v = v_ , w = w_ ; } }; vector < edge > e [ 100005 ]; ll d [ 100005 ]; int fa [ 100005 ][ 30 ], dep [ 100005 ]; priority_queue < pr > q ; void dijkstra (){ while ( ! q . empty ()){ q . pop (); } for ( int i = 1 ; i <= n ; i ++ ){ d [ i ] = -1 ; } d [ 1 ] = 0 ; q . push ( make_pair ( 0 , 1 )); while ( ! q . empty ()){ pr nw = q . top (); q . pop (); int u = nw . second ; for ( int i = e [ u ]. size () -1 ; i >= 0 ; i -- ){ int v = e [ u ][ i ]. v ; ll w = e [ u ][ i ]. w ; if ( d [ v ] == -1 || d [ v ] > d [ u ] + w ){ d [ v ] = d [ u ] + w ; fa [ v ][ 0 ] = u ; dep [ v ] = dep [ u ] + 1 ; q . push ( make_pair ( - d [ v ], v )); } } } } void init (){ for ( int j = 1 ; j <= 25 ; j ++ ){ for ( int i = 1 ; i <= n ; i ++ ){ fa [ i ][ j ] = fa [ fa [ i ][ j -1 ]][ j -1 ]; } } } int lca ( int u , int v ){ if ( dep [ v ] > dep [ u ]){ swap ( u , v ); } for ( int i = 25 ; i >= 0 ; i -- ) if ( dep [ fa [ u ][ i ]] >= dep [ v ]) u = fa [ u ][ i ]; for ( int i = 25 ; i >= 0 ; i -- ) if ( fa [ u ][ i ] != fa [ v ][ i ]){ u = fa [ u ][ i ]; v = fa [ v ][ i ]; } return fa [ u ][ 0 ]; } struct nont { int u , v ; ll w ; nont (){} nont ( int u_ , int v_ , ll w_ ){ u = u_ , v = v_ , w = w_ ; } }; bool operator < ( nont a , nont b ){ return d [ a . u ] + d [ a . v ] + a . w < d [ b . u ] + d [ b . v ] + b . w ; } nont nt [ 200005 ]; int tp = 0 ; ll ans [ 100005 ]; int nx [ 100005 ]; int getfa ( int u ){ return ( u == nx [ u ]) ? u : ( nx [ u ] = getfa ( nx [ u ])); } int main (){ scanf ( \"%d%d\" , & n , & m ); for ( int i = 1 ; i <= m ; i ++ ){ int a , b ; ll t ; scanf ( \"%d%d%lld\" , & a , & b , & t ); e [ a ]. push_back ( edge ( b , t )); e [ b ]. push_back ( edge ( a , t )); } dijkstra (); init (); for ( int i = 1 ; i <= n ; i ++ ){ ans [ i ] = -1 ; // \u6ca1\u6709\u6ee1\u8db3\u6761\u4ef6\u8def\u5f84\u4e00\u5b9a\u8981\u8f93\u51fa -1 \u5426\u5219 100Pts -> 40Pts nx [ i ] = i ; for ( int j = e [ i ]. size () -1 ; j >= 0 ; j -- ){ int u = i , v = e [ i ][ j ]. v ; ll w = e [ i ][ j ]. w ; if ( fa [ v ][ 0 ] != u && fa [ u ][ 0 ] != v && u < v ){ nt [ ++ tp ] = nont ( u , v , w ); } } } sort ( nt + 1 , nt + tp + 1 ); for ( int i = 1 ; i <= tp ; i ++ ){ int x = nt [ i ]. u , y = nt [ i ]. v ; ll kw = d [ x ] + d [ y ] + nt [ i ]. w ; int u = getfa ( x ), v = getfa ( y ); while ( u != v ){ if ( dep [ u ] < dep [ v ]){ swap ( u , v ); } ans [ u ] = kw - d [ u ]; nx [ u ] = fa [ u ][ 0 ]; u = getfa ( u ); } } for ( int i = 2 ; i <= n ; i ++ ){ printf ( \"%lld \\n \" , ans [ i ]); } return 0 ; }","title":"\u6b63\u5f0f\u5f00\u59cb\u8bb2\u89e3"},{"location":"solution/P3973/","tags":["\u9898\u89e3","\u8d39\u7528\u6d41"],"text":"P3973 [TJOI2015]\u7ebf\u6027\u4ee3\u6570 \u00b6 \u849f\u84bb\u4e00\u904d\u8fc7\uff0c\u53d1\u9898\u89e3\u796d\u4e4b\u3002 \u4f20\u9001\u95e8 \u4e00\u9053\u770b\u8d77\u6765\u4e0d\u50cf\u8d39\u7528\u6d41\u7684\u8d39\u7528\u6d41 \u5206\u6790 \u00b6 \u5148\u5c55\u5f00\u67ff\u5b50 \\[ \\begin{aligned} D&=(A\\times B-C)\\times A^T\\\\ &=\\sum_{i=1}^n{a_i\\left(\\sum_{j=1}^n{a_j\\cdot b_{j,i}}-c_i\\right)}\\\\ &=\\sum_{i=1}^n\\sum_{j=1}^n{a_ia_jb_{j,i}}-\\sum_{i=1}^n{a_ic_i}\\\\ &=\\sum_{i=1}^n\\sum_{j=1}^n{a_ia_jb_{i,j}}-\\sum_{i=1}^n{a_ic_i} \\end{aligned} \\] \\(A\\) \u662f 01 \u77e9\u9635 \uff0c\u6240\u4ee5 \\(a_i\\) \u548c \\(a_j\\) \u90fd\u4e3a \\(1\\) \u65f6\uff0c \\(a_i a_j\\) \u7684\u53d6\u503c\u624d\u80fd\u662f \\(1\\) \u3002 \u8bbe\u5c55\u5f00\u5f0f\u51cf\u53f7\u524d\u7684\u90e8\u5206\u4e3a \\(X\\) \uff0c\u51cf\u53f7\u540e\u7684\u90e8\u5206\uff08\u542b\u51cf\u53f7\uff09\u4e3a \\(Y\\) \uff0c\u5219 \\(D=X+Y\\) \u3002 \u5148\u8003\u8651 \\(X\\) \u3002\u5047\u8bbe\u6240\u6709 \\(a_i\\) \u5168\u90e8\u662f \\(1\\) \uff0c\u8fd9\u65f6\uff0c \\(X=\\sum b_{i,j}\\) \u3002\u5bf9\u4e8e\u6bcf\u4e00\u5bf9 \\((i,j)\\) \uff0c\u5982\u679c \\(a_i\\) \u548c \\(a_j\\) \u4e2d\u6709\u4e00\u4e2a\u4e3a \\(0\\) \uff0c\u5c31\u4f1a\u4f7f\u51cf\u53f7\u524d\u7684\u90e8\u5206\u51cf\u5c11 \\(b_{i,j}\\) \uff0c\u4e5f\u5c31\u662f\u4ea7\u751f \\(b_{i,j}\\) \u7684\u635f\u5931\u3002 \u518d\u8003\u8651 \\(Y\\) \u3002\u5047\u8bbe\u6240\u6709 \\(a_i\\) \u5168\u90e8\u662f \\(0\\) \uff0c\u8fd9\u65f6\uff0c \\(Y=0\\) \u3002\u5982\u679c \\(a_i\\) \u53d8\u4e3a \\(1\\) \uff0c\u5219\u4f1a\u4f7f \\(Y\\) \u589e\u52a0 \\(-c_i\\) \uff0c\u4e5f\u5c31\u662f\u4ea7\u751f \\(c_i\\) \u7684\u635f\u5931\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u60f3\u4ea7\u751f \\(b_{i,j}\\) \u7684\u635f\u5931\uff0c\u90a3\u4e48 \\(a_i\\) \u548c \\(a_j\\) \u5c31\u4e00\u5b9a\u90fd\u4e3a \\(1\\) \u3002 \u7531\u4e8e \\(b_{i,j}\\) \u548c \\(c_i\\) \u90fd\u975e\u8d1f\uff0c\u8fd9\u663e\u7136\u662f\u975e\u5e38\u7ecf\u5178\u7684\u6700\u5c0f\u5272\u6a21\u578b\u3002\u628a\u56fe\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u8868\u793a\u53d6\uff0c\u4e00\u90e8\u5206\u8868\u793a\u4e0d\u53d6\uff0c\u4e24\u90e8\u5206\u4e4b\u95f4\u8fb9\u8868\u793a\u5173\u7cfb\u3002 \u5efa\u56fe\u65b9\u6cd5 \uff1a\u628a\u6bcf\u4e2a \\(b_{i,j}\\) \u770b\u4f5c\u70b9 \\((i,j)\\) \uff0c\u6e90\u70b9\u5411 \\((i,j)\\) \u8fde\u8fb9\u6743\u4e3a \\(b_{i,j}\\) \u7684\u8fb9\uff0c\u5272\u6389\u8fb9\u8868\u793a \\(a_i\\) \u4e0e \\(a_j\\) \u81f3\u5c11\u6709\u4e00\u4e2a\u662f \\(0\\) \uff0c\u628a\u6bcf\u4e2a \\(c_i\\) \u770b\u4f5c\u70b9 \\(i\\) \uff0c \\((i,j)\\) \u5411 \\(i\\) \u548c \\(j\\) \u8fde\u8fb9\u6743\u4e3a \\(\\infty\\) \u7684\u8fb9\uff0c \\(i\\) \u5411\u6c47\u70b9\u8fde\u8fb9\u6743\u4e3a \\(c_i\\) \u7684\u8fb9\uff0c\u5272\u6389\u8fb9\u8868\u793a \\(a_i=1\\) \uff0c\u8dd1 \u6700\u5c0f\u5272 \u3002 \u5272\u6389\u6e90\u70b9\u5230 \\((i,j)\\) \u7684\u8fb9\u8868\u793a \\(a_i\\) \u4e0e \\(a_j\\) \u81f3\u5c11\u6709\u4e00\u4e2a\u4e3a \\(0\\) \uff0c\u4e5f\u5c31\u662f\u5272\u6389\u6216\u8005\u4e0d\u5272\u6389\u4e00\u6761\u8fb9\u90fd\u8868\u793a\u5bf9 \\(a_i\\) \u7684\u7ea6\u675f\uff0c\u90a3\u4e48\u8fd9\u4e9b\u7ea6\u675f\u4f1a\u4e0d\u4f1a\u51b2\u7a81\u5462\uff1f\u7b54\u6848\u662f\u4e0d\u4f1a\u7684\u3002\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u9a8c\u8bc1\u3002 \u53c2\u8003\u7a0b\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 #include <iostream> #include <cstring> #include <cstdio> #include <algorithm> #include <queue> using namespace std ; typedef long long ll ; const ll inf = 1145141919810000 ; namespace Flow { const int maxn = 251005 , maxm = 750600 ; struct Edge { int v ; ll w ; int nxt ; } E [ maxm * 2 ]; int Fst [ maxn ], tp = 1 ; void add ( int u , int v , ll w ){ E [ ++ tp ] = Edge { v , w , Fst [ u ]}; Fst [ u ] = tp ; } void addEdge ( int u , int v , ll w ){ add ( u , v , w ); add ( v , u , 0 ); } int s , t , h [ maxn ], g [ maxn ]; void bfs (){ queue < int > Q ; g [ h [ t ] = 1 ] ++ ; Q . push ( t ); while ( ! Q . empty ()){ int u = Q . front (); Q . pop (); for ( int e = Fst [ u ]; e ; e = E [ e ]. nxt ){ int v = E [ e ]. v ; if ( h [ v ]) continue ; g [ h [ v ] = h [ u ] + 1 ] ++ ; Q . push ( v ); } } } ll aug ( int u , ll F ){ if ( u == t || F == 0 ) return F ; ll tot = 0 ; for ( int e = Fst [ u ]; e ; e = E [ e ]. nxt ){ int v = E [ e ]. v ; if ( E [ e ]. w == 0 || h [ v ] + 1 != h [ u ]) continue ; ll f = aug ( v , min ( F , E [ e ]. w )); F -= f ; tot += f ; E [ e ]. w -= f ; E [ e ^ 1 ]. w += f ; if ( F == 0 ){ return tot ; } } if (( -- g [ h [ u ]]) == 0 ) h [ s ] = maxn -1 ; g [ ++ h [ u ]] ++ ; return tot ; } ll flow (){ bfs (); ll ans = 0 ; while ( h [ s ] < maxn -1 ) ans += aug ( s , inf ); return ans ; } } int n ; ll b [ 505 ][ 505 ], c [ 505 ], su ; int main (){ ios :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cout . tie ( 0 ); cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) cin >> b [ i ][ j ], su += b [ i ][ j ]; for ( int i = 1 ; i <= n ; i ++ ) cin >> c [ i ]; Flow :: s = 1 ; Flow :: t = 2 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) Flow :: addEdge ( 1 , n * ( i -1 ) + j + 2 , b [ i ][ j ]); for ( int i = 1 ; i <= n ; i ++ ) Flow :: addEdge ( 2 + n * n + i , 2 , c [ i ]); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ){ Flow :: addEdge ( n * ( i -1 ) + j + 2 , 2 + n * n + i , inf ); Flow :: addEdge ( n * ( i -1 ) + j + 2 , 2 + n * n + j , inf ); } cout << su - Flow :: flow () << endl ; return 0 ; }","title":"P3973 [TJOI2015]\u7ebf\u6027\u4ee3\u6570"},{"location":"solution/P3973/#p3973-tjoi2015","text":"\u849f\u84bb\u4e00\u904d\u8fc7\uff0c\u53d1\u9898\u89e3\u796d\u4e4b\u3002 \u4f20\u9001\u95e8 \u4e00\u9053\u770b\u8d77\u6765\u4e0d\u50cf\u8d39\u7528\u6d41\u7684\u8d39\u7528\u6d41","title":"P3973 [TJOI2015]\u7ebf\u6027\u4ee3\u6570"},{"location":"solution/P3973/#_1","text":"\u5148\u5c55\u5f00\u67ff\u5b50 \\[ \\begin{aligned} D&=(A\\times B-C)\\times A^T\\\\ &=\\sum_{i=1}^n{a_i\\left(\\sum_{j=1}^n{a_j\\cdot b_{j,i}}-c_i\\right)}\\\\ &=\\sum_{i=1}^n\\sum_{j=1}^n{a_ia_jb_{j,i}}-\\sum_{i=1}^n{a_ic_i}\\\\ &=\\sum_{i=1}^n\\sum_{j=1}^n{a_ia_jb_{i,j}}-\\sum_{i=1}^n{a_ic_i} \\end{aligned} \\] \\(A\\) \u662f 01 \u77e9\u9635 \uff0c\u6240\u4ee5 \\(a_i\\) \u548c \\(a_j\\) \u90fd\u4e3a \\(1\\) \u65f6\uff0c \\(a_i a_j\\) \u7684\u53d6\u503c\u624d\u80fd\u662f \\(1\\) \u3002 \u8bbe\u5c55\u5f00\u5f0f\u51cf\u53f7\u524d\u7684\u90e8\u5206\u4e3a \\(X\\) \uff0c\u51cf\u53f7\u540e\u7684\u90e8\u5206\uff08\u542b\u51cf\u53f7\uff09\u4e3a \\(Y\\) \uff0c\u5219 \\(D=X+Y\\) \u3002 \u5148\u8003\u8651 \\(X\\) \u3002\u5047\u8bbe\u6240\u6709 \\(a_i\\) \u5168\u90e8\u662f \\(1\\) \uff0c\u8fd9\u65f6\uff0c \\(X=\\sum b_{i,j}\\) \u3002\u5bf9\u4e8e\u6bcf\u4e00\u5bf9 \\((i,j)\\) \uff0c\u5982\u679c \\(a_i\\) \u548c \\(a_j\\) \u4e2d\u6709\u4e00\u4e2a\u4e3a \\(0\\) \uff0c\u5c31\u4f1a\u4f7f\u51cf\u53f7\u524d\u7684\u90e8\u5206\u51cf\u5c11 \\(b_{i,j}\\) \uff0c\u4e5f\u5c31\u662f\u4ea7\u751f \\(b_{i,j}\\) \u7684\u635f\u5931\u3002 \u518d\u8003\u8651 \\(Y\\) \u3002\u5047\u8bbe\u6240\u6709 \\(a_i\\) \u5168\u90e8\u662f \\(0\\) \uff0c\u8fd9\u65f6\uff0c \\(Y=0\\) \u3002\u5982\u679c \\(a_i\\) \u53d8\u4e3a \\(1\\) \uff0c\u5219\u4f1a\u4f7f \\(Y\\) \u589e\u52a0 \\(-c_i\\) \uff0c\u4e5f\u5c31\u662f\u4ea7\u751f \\(c_i\\) \u7684\u635f\u5931\u3002 \u5982\u679c\u6211\u4eec\u4e0d\u60f3\u4ea7\u751f \\(b_{i,j}\\) \u7684\u635f\u5931\uff0c\u90a3\u4e48 \\(a_i\\) \u548c \\(a_j\\) \u5c31\u4e00\u5b9a\u90fd\u4e3a \\(1\\) \u3002 \u7531\u4e8e \\(b_{i,j}\\) \u548c \\(c_i\\) \u90fd\u975e\u8d1f\uff0c\u8fd9\u663e\u7136\u662f\u975e\u5e38\u7ecf\u5178\u7684\u6700\u5c0f\u5272\u6a21\u578b\u3002\u628a\u56fe\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u8868\u793a\u53d6\uff0c\u4e00\u90e8\u5206\u8868\u793a\u4e0d\u53d6\uff0c\u4e24\u90e8\u5206\u4e4b\u95f4\u8fb9\u8868\u793a\u5173\u7cfb\u3002 \u5efa\u56fe\u65b9\u6cd5 \uff1a\u628a\u6bcf\u4e2a \\(b_{i,j}\\) \u770b\u4f5c\u70b9 \\((i,j)\\) \uff0c\u6e90\u70b9\u5411 \\((i,j)\\) \u8fde\u8fb9\u6743\u4e3a \\(b_{i,j}\\) \u7684\u8fb9\uff0c\u5272\u6389\u8fb9\u8868\u793a \\(a_i\\) \u4e0e \\(a_j\\) \u81f3\u5c11\u6709\u4e00\u4e2a\u662f \\(0\\) \uff0c\u628a\u6bcf\u4e2a \\(c_i\\) \u770b\u4f5c\u70b9 \\(i\\) \uff0c \\((i,j)\\) \u5411 \\(i\\) \u548c \\(j\\) \u8fde\u8fb9\u6743\u4e3a \\(\\infty\\) \u7684\u8fb9\uff0c \\(i\\) \u5411\u6c47\u70b9\u8fde\u8fb9\u6743\u4e3a \\(c_i\\) \u7684\u8fb9\uff0c\u5272\u6389\u8fb9\u8868\u793a \\(a_i=1\\) \uff0c\u8dd1 \u6700\u5c0f\u5272 \u3002 \u5272\u6389\u6e90\u70b9\u5230 \\((i,j)\\) \u7684\u8fb9\u8868\u793a \\(a_i\\) \u4e0e \\(a_j\\) \u81f3\u5c11\u6709\u4e00\u4e2a\u4e3a \\(0\\) \uff0c\u4e5f\u5c31\u662f\u5272\u6389\u6216\u8005\u4e0d\u5272\u6389\u4e00\u6761\u8fb9\u90fd\u8868\u793a\u5bf9 \\(a_i\\) \u7684\u7ea6\u675f\uff0c\u90a3\u4e48\u8fd9\u4e9b\u7ea6\u675f\u4f1a\u4e0d\u4f1a\u51b2\u7a81\u5462\uff1f\u7b54\u6848\u662f\u4e0d\u4f1a\u7684\u3002\u5927\u5bb6\u53ef\u4ee5\u81ea\u884c\u9a8c\u8bc1\u3002 \u53c2\u8003\u7a0b\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 #include <iostream> #include <cstring> #include <cstdio> #include <algorithm> #include <queue> using namespace std ; typedef long long ll ; const ll inf = 1145141919810000 ; namespace Flow { const int maxn = 251005 , maxm = 750600 ; struct Edge { int v ; ll w ; int nxt ; } E [ maxm * 2 ]; int Fst [ maxn ], tp = 1 ; void add ( int u , int v , ll w ){ E [ ++ tp ] = Edge { v , w , Fst [ u ]}; Fst [ u ] = tp ; } void addEdge ( int u , int v , ll w ){ add ( u , v , w ); add ( v , u , 0 ); } int s , t , h [ maxn ], g [ maxn ]; void bfs (){ queue < int > Q ; g [ h [ t ] = 1 ] ++ ; Q . push ( t ); while ( ! Q . empty ()){ int u = Q . front (); Q . pop (); for ( int e = Fst [ u ]; e ; e = E [ e ]. nxt ){ int v = E [ e ]. v ; if ( h [ v ]) continue ; g [ h [ v ] = h [ u ] + 1 ] ++ ; Q . push ( v ); } } } ll aug ( int u , ll F ){ if ( u == t || F == 0 ) return F ; ll tot = 0 ; for ( int e = Fst [ u ]; e ; e = E [ e ]. nxt ){ int v = E [ e ]. v ; if ( E [ e ]. w == 0 || h [ v ] + 1 != h [ u ]) continue ; ll f = aug ( v , min ( F , E [ e ]. w )); F -= f ; tot += f ; E [ e ]. w -= f ; E [ e ^ 1 ]. w += f ; if ( F == 0 ){ return tot ; } } if (( -- g [ h [ u ]]) == 0 ) h [ s ] = maxn -1 ; g [ ++ h [ u ]] ++ ; return tot ; } ll flow (){ bfs (); ll ans = 0 ; while ( h [ s ] < maxn -1 ) ans += aug ( s , inf ); return ans ; } } int n ; ll b [ 505 ][ 505 ], c [ 505 ], su ; int main (){ ios :: sync_with_stdio ( 0 ); cin . tie ( 0 ); cout . tie ( 0 ); cin >> n ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) cin >> b [ i ][ j ], su += b [ i ][ j ]; for ( int i = 1 ; i <= n ; i ++ ) cin >> c [ i ]; Flow :: s = 1 ; Flow :: t = 2 ; for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ) Flow :: addEdge ( 1 , n * ( i -1 ) + j + 2 , b [ i ][ j ]); for ( int i = 1 ; i <= n ; i ++ ) Flow :: addEdge ( 2 + n * n + i , 2 , c [ i ]); for ( int i = 1 ; i <= n ; i ++ ) for ( int j = 1 ; j <= n ; j ++ ){ Flow :: addEdge ( n * ( i -1 ) + j + 2 , 2 + n * n + i , inf ); Flow :: addEdge ( n * ( i -1 ) + j + 2 , 2 + n * n + j , inf ); } cout << su - Flow :: flow () << endl ; return 0 ; }","title":"\u5206\u6790"},{"location":"solution/P4012/","tags":["\u9898\u89e3","\u8d39\u7528\u6d41"],"text":"P4012 \u6df1\u6d77\u673a\u5668\u4eba\u95ee\u9898 \u00b6 \u9898\u76ee \u4e00\u9053\u8d39\u7528\u6d41\u5efa\u6a21\u9898 \u9898\u610f \u00b6 \u673a\u5668\u4eba\u6d3b\u52a8\u533a\u57df\u4e3a \\(p\\times q\\) \u7684\u7f51\u683c\u56fe\u3002 \u6709 \\(a\\) \u4e2a\u51fa\u53d1\u70b9\uff0c\u6bcf\u4e2a\u51fa\u53d1\u70b9\u6709 \\(k_i\\) \u4e2a\u6df1\u6d77\u673a\u5668\u4eba\u3002 \u6709 \\(b\\) \u4e2a\u76ee\u7684\u5730\uff0c\u6bcf\u4e2a\u76ee\u7684\u5730\u9700\u8981 \\(r_i\\) \u4e2a\u6df1\u6d77\u673a\u5668\u4eba\u5230\u8fbe\u3002 \u6bcf\u4e2a\u673a\u5668\u4eba\u53ef\u4ee5\u4ece\u51fa\u53d1\u70b9\u51fa\u53d1\u5411\u4e1c\u6216\u5411\u5317\u79fb\u52a8\u5230\u8fbe\u76ee\u7684\u5730\uff0c\u673a\u5668\u4eba\u53ef\u4ee5\u91c7\u96c6\u6cbf\u9014\u7684\u6807\u672c\u5e76\u83b7\u5f97\u4ef7\u503c\uff0c \u6bcf\u4e2a\u6807\u672c\u53ea\u80fd\u88ab\u91c7\u96c6\u4e00\u6b21 \uff0c\u4f46 \u8fb9\u53ef\u4ee5\u88ab\u91cd\u590d\u8d70\u8fc7 \uff0c\u540c\u4e00\u65f6\u523b\u591a\u4e2a\u673a\u5668\u4eba\u53ef\u5360\u636e\u540c\u4e00\u4e2a\u70b9\u3002 \u5efa\u6a21 \u00b6 \u770b\u5230\u591a\u4e2a\u673a\u5668\u4eba\u4e00\u8d77\u8fd0\u52a8\uff0c\u6c42\u6700\u5927\u4ee3\u4ef7\uff0c\u679c\u65ad\u8d39\u7528\u6d41\u3002 P.S.\u8fd9\u91cc\u4e0d\u533a\u5206\u8d39\u7528\u6d41\u6a21\u578b\u4e2d\u7684\u70b9\u548c\u7f51\u683c\u56fe\u4e2d\u7684\u70b9 \u4ece\u8d85\u7ea7\u6e90\u70b9\u5f80\u6bcf\u4e2a\u51fa\u53d1\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf \\(k_i\\) \uff0c\u8d39\u7528 \\(0\\) \uff0c\u8868\u793a \\(k_i\\) \u4e2a\u673a\u5668\u4eba\u4ece\u7b2c \\(i\\) \u4e2a\u51fa\u53d1\u70b9\u51fa\u53d1\u3002 \u4ece\u6bcf\u4e2a\u76ee\u7684\u5730\u5f80\u8d85\u7ea7\u6c47\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf \\(r_i\\) \uff0c\u8d39\u7528 \\(0\\) \uff0c\u8868\u793a \\(r_i\\) \u4e2a\u673a\u5668\u4eba\u5c06\u4f1a\u6700\u7ec8\u5230\u8fbe\u7b2c \\(i\\) \u4e2a\u76ee\u7684\u5730\u3002 \u5982\u679c\u6bcf\u4e2a\u6807\u672c\u53ef\u4ee5\u65e0\u9650\u6b21\u91c7\u96c6\uff0c\u90a3\u5c31\u5f88\u597d\u529e\uff0c\u7f51\u683c\u56fe\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5411\u5b83\u4e1c\u8fb9\u3001\u5317\u8fb9\u7684\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u8d39\u7528\u4e3a\u5bf9\u5e94\u6807\u672c\u4ef7\u503c\uff0c\u5bb9\u91cf\u4e3a \\(\\infty\\) \uff0c\u8868\u793a\u6bcf\u6761\u8fb9\u53ef\u4ee5\u65e0\u9650\u6b21\u8d70\u3002 \u4f46\u662f\u8fd9\u91cc\u6bcf\u4e2a\u6807\u672c \u53ea\u80fd\u88ab\u91c7\u96c6\u4e00\u6b21 \u3002\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u628a\u4e00\u6761\u8fb9\u62c6\u6210\u4e24\u6761\u8fb9\uff0c\u4e00\u6761\u8d39\u7528\u4e3a\u8fd9\u6761\u8fb9\u4e0a\u7684\u6807\u672c\u4ef7\u503c\uff0c\u5bb9\u91cf\u4e3a \\(1\\) \uff0c\u53e6\u4e00\u6761\u8d39\u7528\u4e3a \\(0\\) \uff0c\u5bb9\u91cf\u4e3a \\(\\infty\\) \u3002 \u6700\u540e\u56fe\u662f\u8fd9\u6837\u7684 \u56fe\u4e2d\u7eff\u70b9\u8868\u793a\u51fa\u53d1\u70b9\uff0c\u84dd\u70b9\u8868\u793a\u76ee\u7684\u5730\uff0c\u6ce8\u610f\u56fe\u4e2d\u7684\u4e00\u4e2a\u7bad\u5934\u80fd\u540c\u65f6\u8868\u793a\u6700\u7ec8\u56fe\u4e2d\u7684\u4e24\u6761\u8fb9 \u6700\u540e\u8dd1\u4e00\u4e2a\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002 Code \u00b6 \u5efa\u56fe\u90e8\u5206 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 for ( int i = 1 ; i <= p ; i ++ ){ // \u5411\u4e1c\u8def\u5f84 for ( int j = 1 ; j < q ; j ++ ){ ll t ; scanf ( \"%lld\" , & t ); cflow :: addflow ( id ( i , j ), id ( i , j + 1 ), 1 , - t ); // \u8d39\u7528\u53d6\u76f8\u53cd\u6570\u8f6c\u6362\u4e3a\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 cflow :: addflow ( id ( i , j ), id ( i , j + 1 ), inf , 0 ); //\u6ce8\u610f\u8fd9\u6761\u8fb9\u4e0d\u662f\u53cd\u5411\u8fb9 // \u52a0\u53cd\u5411\u8fb9\u5728 addflow \u91cc } } for ( int j = 1 ; j <= q ; j ++ ){ // \u5411\u5317\u8def\u5f84 for ( int i = 1 ; i < p ; i ++ ){ ll t ; scanf ( \"%lld\" , & t ); cflow :: addflow ( id ( i , j ), id ( i + 1 , j ), 1 , - t ); cflow :: addflow ( id ( i , j ), id ( i + 1 , j ), inf , 0 ); } } for ( int i = 1 ; i <= a ; i ++ ){ ll k ; int x , y ; scanf ( \"%lld%d%d\" , & k , & x , & y ); cflow :: addflow ( 1 , id ( x + 1 , y + 1 ), k , 0 ); // \u51fa\u53d1\u70b9 } for ( int i = 1 ; i <= b ; i ++ ){ ll k ; int x , y ; scanf ( \"%lld%d%d\" , & k , & x , & y ); cflow :: addflow ( id ( x + 1 , y + 1 ), 2 , k , 0 ); // \u76ee\u7684\u5730 } \u53c2\u8003\u4ee3\uinclude <iostream> #include <cstdio> #include <cstring> #include <algorithm> #include <queue> using namespace std ; typedef long long ll ; const ll inf = 0x3f3f3f3f3f3f3f3f ; namespace cflow { // \u539f\u59cb\u5bf9\u5076\u7b97\u6cd5 const int maxn = 5005 , maxm = 50005 ; int n , s , t ; inline int oth ( int x ){ return (( x -1 ) ^ 1 ) + 1 ; } struct edge { int u , v ; ll w , c ; int nxt ; edge (){} edge ( int u_ , int v_ , ll w_ , ll c_ , int nxt_ ) { u = u_ , v = v_ , w = w_ , c = c_ , nxt = nxt_ ; } } e [ 2 * maxm ]; int fst [ maxn ], tp = 0 ; void addedge ( int u , int v , ll w , ll c ){ e [ ++ tp ] = edge ( u , v , w , c , fst [ u ]); fst [ u ] = tp ; } void addflow ( int u , int v , ll w , ll c ){ addedge ( u , v , w , c ); addedge ( v , u , 0 , - c ); } ll dis [ maxn ], h [ maxn ], mxw [ maxn ]; int cnt [ maxn ], frm [ maxn ], fre [ maxn ]; bool vis [ maxn ]; void spfa (){ static queue < int > q ; while ( ! q . empty ()){ q . pop (); } memset ( dis , 0x3f , sizeof ( dis )); memset ( cnt , 0 , sizeof ( cnt )); memset ( vis , 0 , sizeof ( vis )); dis [ s ] = 0 ; vis [ s ] = 1 ; q . push ( s ); cnt [ s ] ++ ; while ( ! q . empty ()){ int u = q . front (); q . pop (); vis [ u ] = 0 ; if ( cnt [ u ] > n + 1 ){ break ; } for ( int i = fst [ u ]; i != 0 ; i = e [ i ]. nxt ){ int v = e [ i ]. v ; ll c = e [ i ]. c ; if ( e [ i ]. w == 0 ){ continue ; } if ( dis [ v ] > dis [ u ] + c ){ dis [ v ] = dis [ u ] + c ; if ( ! vis [ v ]){ vis [ v ] = 1 ; q . push ( v ); cnt [ v ] ++ ; } } } } } void clear (){ memset ( cflow :: fst , 0 , sizeof ( cflow :: fst )); cflow :: tp = 0 ; } void init ( int n_ , int s_ , int t_ ){ clear (); n = n_ , s = s_ , t = t_ ; } struct pr { ll dis ; int u ; pr (){} pr ( int u_ , ll dis_ ){ u = u_ , dis = dis_ ;} }; bool operator < ( pr a , pr b ){ return ( a . dis != b . dis ) ? ( a . dis > b . dis ) : ( a . u > b . u ); } bool dijkstra (){ static priority_queue < pr > q ; while ( ! q . empty ()){ q . pop (); } memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; mxw [ s ] = inf ; q . push ( pr ( s , 0 )); while ( ! q . empty ()){ int u = q . top (). u ; q . pop (); for ( int i = fst [ u ]; i != 0 ; i = e [ i ]. nxt ){ int v = e [ i ]. v ; ll c = e [ i ]. c + h [ u ] - h [ v ], w = e [ i ]. w ; if ( w && ( dis [ v ] > dis [ u ] + c )){ dis [ v ] = dis [ u ] + c ; mxw [ v ] = min ( mxw [ u ], w ); frm [ v ] = u ; fre [ v ] = i ; q . push ( pr ( v , dis [ v ])); } } } return dis [ t ] != inf ; } ll mincost , maxflow ; void MCMF (){ spfa (); memcpy ( h , dis , sizeof ( h )); mincost = maxflow = 0 ; while ( dijkstra ()){ ll flow = mxw [ t ]; maxflow += flow ; mincost += flow * ( dis [ t ] - h [ s ] + h [ t ]); for ( int i = t ; i != s ; i = frm [ i ]){ e [ fre [ i ]]. w -= flow ; e [ oth ( fre [ i ])]. w += flow ; } for ( int i = 1 ; i <= n ; i ++ ){ h [ i ] += dis [ i ]; } } } } int a , b , p , q ; inline int id ( int i , int j ){ return q * ( i -1 ) + j + 2 ; } int main (){ scanf ( \"%d%d%d%d\" , & a , & b , & p , & q ); p ++ , q ++ ; // \u6ce8\u610f\u6709 (p+1)*(q+1) \u4e2a\u70b9 cflow :: init ( p * q + 100 , 1 , 2 ); // \u4ee5 1 \u4e3a\u6e90\u70b9\uff0c2 \u4e3a\u6c47\u70b9 for ( int i = 1 ; i <= p ; i ++ ){ // \u5411\u4e1c\u8def\u5f84 for ( int j = 1 ; j < q ; j ++ ){ ll t ; scanf ( \"%lld\" , & t ); cflow :: addflow ( id ( i , j ), id ( i , j + 1 ), 1 , - t ); // \u8d39\u7528\u53d6\u76f8\u53cd\u6570\u8f6c\u6362\u4e3a\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 cflow :: addflow ( id ( i , j ), id ( i , j + 1 ), inf , 0 ); //\u6ce8\u610f\u8fd9\u6761\u8fb9\u4e0d\u662f\u53cd\u5411\u8fb9 // \u52a0\u53cd\u5411\u8fb9\u5728 addflow \u91cc } } for ( int j = 1 ; j <= q ; j ++ ){ // \u5411\u5317\u8def\u5f84 for ( int i = 1 ; i < p ; i ++ ){ ll t ; scanf ( \"%lld\" , & t ); cflow :: addflow ( id ( i , j ), id ( i + 1 , j ), 1 , - t ); cflow :: addflow ( id ( i , j ), id ( i + 1 , j ), inf , 0 ); } } for ( int i = 1 ; i <= a ; i ++ ){ ll k ; int x , y ; scanf ( \"%lld%d%d\" , & k , & x , & y ); cflow :: addflow ( 1 , id ( x + 1 , y + 1 ), k , 0 ); // \u51fa\u53d1\u70b9 } for ( int i = 1 ; i <= b ; i ++ ){ ll k ; int x , y ; scanf ( \"%lld%d%d\" , & k , & x , & y ); cflow :: addflow ( id ( x + 1 , y + 1 ), 2 , k , 0 ); // \u76ee\u7684\u5730 } cflow :: MCMF (); printf ( \"%lld \\n \" , - cflow :: mincost ); // \u8d39\u7528\u53d6\u4e86\u76f8\u53cd\u6570 return 0 ; }","title":"P4012 \u6df1\u6d77\u673a\u5668\u4eba\u95ee\u9898"},{"location":"solution/P4012/#p4012","text":"\u9898\u76ee \u4e00\u9053\u8d39\u7528\u6d41\u5efa\u6a21\u9898","title":"P4012 \u6df1\u6d77\u673a\u5668\u4eba\u95ee\u9898"},{"location":"solution/P4012/#_1","text":"\u673a\u5668\u4eba\u6d3b\u52a8\u533a\u57df\u4e3a \\(p\\times q\\) \u7684\u7f51\u683c\u56fe\u3002 \u6709 \\(a\\) \u4e2a\u51fa\u53d1\u70b9\uff0c\u6bcf\u4e2a\u51fa\u53d1\u70b9\u6709 \\(k_i\\) \u4e2a\u6df1\u6d77\u673a\u5668\u4eba\u3002 \u6709 \\(b\\) \u4e2a\u76ee\u7684\u5730\uff0c\u6bcf\u4e2a\u76ee\u7684\u5730\u9700\u8981 \\(r_i\\) \u4e2a\u6df1\u6d77\u673a\u5668\u4eba\u5230\u8fbe\u3002 \u6bcf\u4e2a\u673a\u5668\u4eba\u53ef\u4ee5\u4ece\u51fa\u53d1\u70b9\u51fa\u53d1\u5411\u4e1c\u6216\u5411\u5317\u79fb\u52a8\u5230\u8fbe\u76ee\u7684\u5730\uff0c\u673a\u5668\u4eba\u53ef\u4ee5\u91c7\u96c6\u6cbf\u9014\u7684\u6807\u672c\u5e76\u83b7\u5f97\u4ef7\u503c\uff0c \u6bcf\u4e2a\u6807\u672c\u53ea\u80fd\u88ab\u91c7\u96c6\u4e00\u6b21 \uff0c\u4f46 \u8fb9\u53ef\u4ee5\u88ab\u91cd\u590d\u8d70\u8fc7 \uff0c\u540c\u4e00\u65f6\u523b\u591a\u4e2a\u673a\u5668\u4eba\u53ef\u5360\u636e\u540c\u4e00\u4e2a\u70b9\u3002","title":"\u9898\u610f"},{"location":"solution/P4012/#_2","text":"\u770b\u5230\u591a\u4e2a\u673a\u5668\u4eba\u4e00\u8d77\u8fd0\u52a8\uff0c\u6c42\u6700\u5927\u4ee3\u4ef7\uff0c\u679c\u65ad\u8d39\u7528\u6d41\u3002 P.S.\u8fd9\u91cc\u4e0d\u533a\u5206\u8d39\u7528\u6d41\u6a21\u578b\u4e2d\u7684\u70b9\u548c\u7f51\u683c\u56fe\u4e2d\u7684\u70b9 \u4ece\u8d85\u7ea7\u6e90\u70b9\u5f80\u6bcf\u4e2a\u51fa\u53d1\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf \\(k_i\\) \uff0c\u8d39\u7528 \\(0\\) \uff0c\u8868\u793a \\(k_i\\) \u4e2a\u673a\u5668\u4eba\u4ece\u7b2c \\(i\\) \u4e2a\u51fa\u53d1\u70b9\u51fa\u53d1\u3002 \u4ece\u6bcf\u4e2a\u76ee\u7684\u5730\u5f80\u8d85\u7ea7\u6c47\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf \\(r_i\\) \uff0c\u8d39\u7528 \\(0\\) \uff0c\u8868\u793a \\(r_i\\) \u4e2a\u673a\u5668\u4eba\u5c06\u4f1a\u6700\u7ec8\u5230\u8fbe\u7b2c \\(i\\) \u4e2a\u76ee\u7684\u5730\u3002 \u5982\u679c\u6bcf\u4e2a\u6807\u672c\u53ef\u4ee5\u65e0\u9650\u6b21\u91c7\u96c6\uff0c\u90a3\u5c31\u5f88\u597d\u529e\uff0c\u7f51\u683c\u56fe\u4e2d\u7684\u6bcf\u4e2a\u70b9\u5411\u5b83\u4e1c\u8fb9\u3001\u5317\u8fb9\u7684\u70b9\u8fde\u4e00\u6761\u8fb9\uff0c\u8d39\u7528\u4e3a\u5bf9\u5e94\u6807\u672c\u4ef7\u503c\uff0c\u5bb9\u91cf\u4e3a \\(\\infty\\) \uff0c\u8868\u793a\u6bcf\u6761\u8fb9\u53ef\u4ee5\u65e0\u9650\u6b21\u8d70\u3002 \u4f46\u662f\u8fd9\u91cc\u6bcf\u4e2a\u6807\u672c \u53ea\u80fd\u88ab\u91c7\u96c6\u4e00\u6b21 \u3002\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u628a\u4e00\u6761\u8fb9\u62c6\u6210\u4e24\u6761\u8fb9\uff0c\u4e00\u6761\u8d39\u7528\u4e3a\u8fd9\u6761\u8fb9\u4e0a\u7684\u6807\u672c\u4ef7\u503c\uff0c\u5bb9\u91cf\u4e3a \\(1\\) \uff0c\u53e6\u4e00\u6761\u8d39\u7528\u4e3a \\(0\\) \uff0c\u5bb9\u91cf\u4e3a \\(\\infty\\) \u3002 \u6700\u540e\u56fe\u662f\u8fd9\u6837\u7684 \u56fe\u4e2d\u7eff\u70b9\u8868\u793a\u51fa\u53d1\u70b9\uff0c\u84dd\u70b9\u8868\u793a\u76ee\u7684\u5730\uff0c\u6ce8\u610f\u56fe\u4e2d\u7684\u4e00\u4e2a\u7bad\u5934\u80fd\u540c\u65f6\u8868\u793a\u6700\u7ec8\u56fe\u4e2d\u7684\u4e24\u6761\u8fb9 \u6700\u540e\u8dd1\u4e00\u4e2a\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002","title":"\u5efa\u6a21"},{"location":"solution/P4012/#code","text":"\u5efa\u56fe\u90e8\u5206 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 for ( int i = 1 ; i <= p ; i ++ ){ // \u5411\u4e1c\u8def\u5f84 for ( int j = 1 ; j < q ; j ++ ){ ll t ; scanf ( \"%lld\" , & t ); cflow :: addflow ( id ( i , j ), id ( i , j + 1 ), 1 , - t ); // \u8d39\u7528\u53d6\u76f8\u53cd\u6570\u8f6c\u6362\u4e3a\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 cflow :: addflow ( id ( i , j ), id ( i , j + 1 ), inf , 0 ); //\u6ce8\u610f\u8fd9\u6761\u8fb9\u4e0d\u662f\u53cd\u5411\u8fb9 // \u52a0\u53cd\u5411\u8fb9\u5728 addflow \u91cc } } for ( int j = 1 ; j <= q ; j ++ ){ // \u5411\u5317\u8def\u5f84 for ( int i = 1 ; i < p ; i ++ ){ ll t ; scanf ( \"%lld\" , & t ); cflow :: addflow ( id ( i , j ), id ( i + 1 , j ), 1 , - t ); cflow :: addflow ( id ( i , j ), id ( i + 1 , j ), inf , 0 ); } } for ( int i = 1 ; i <= a ; i ++ ){ ll k ; int x , y ; scanf ( \"%lld%d%d\" , & k , & x , & y ); cflow :: addflow ( 1 , id ( x + 1 , y + 1 ), k , 0 ); // \u51fa\u53d1\u70b9 } for ( int i = 1 ; i <= b ; i ++ ){ ll k ; int x , y ; scanf ( \"%lld%d%d\" , & k , & x , & y ); cflow :: addflow ( id ( x + 1 , y + 1 ), 2 , k , 0 ); // \u76ee\u7684\u5730 } \u53c2\u8003\u4ee3\uinclude <iostream> #include <cstdio> #include <cstring> #include <algorithm> #include <queue> using namespace std ; typedef long long ll ; const ll inf = 0x3f3f3f3f3f3f3f3f ; namespace cflow { // \u539f\u59cb\u5bf9\u5076\u7b97\u6cd5 const int maxn = 5005 , maxm = 50005 ; int n , s , t ; inline int oth ( int x ){ return (( x -1 ) ^ 1 ) + 1 ; } struct edge { int u , v ; ll w , c ; int nxt ; edge (){} edge ( int u_ , int v_ , ll w_ , ll c_ , int nxt_ ) { u = u_ , v = v_ , w = w_ , c = c_ , nxt = nxt_ ; } } e [ 2 * maxm ]; int fst [ maxn ], tp = 0 ; void addedge ( int u , int v , ll w , ll c ){ e [ ++ tp ] = edge ( u , v , w , c , fst [ u ]); fst [ u ] = tp ; } void addflow ( int u , int v , ll w , ll c ){ addedge ( u , v , w , c ); addedge ( v , u , 0 , - c ); } ll dis [ maxn ], h [ maxn ], mxw [ maxn ]; int cnt [ maxn ], frm [ maxn ], fre [ maxn ]; bool vis [ maxn ]; void spfa (){ static queue < int > q ; while ( ! q . empty ()){ q . pop (); } memset ( dis , 0x3f , sizeof ( dis )); memset ( cnt , 0 , sizeof ( cnt )); memset ( vis , 0 , sizeof ( vis )); dis [ s ] = 0 ; vis [ s ] = 1 ; q . push ( s ); cnt [ s ] ++ ; while ( ! q . empty ()){ int u = q . front (); q . pop (); vis [ u ] = 0 ; if ( cnt [ u ] > n + 1 ){ break ; } for ( int i = fst [ u ]; i != 0 ; i = e [ i ]. nxt ){ int v = e [ i ]. v ; ll c = e [ i ]. c ; if ( e [ i ]. w == 0 ){ continue ; } if ( dis [ v ] > dis [ u ] + c ){ dis [ v ] = dis [ u ] + c ; if ( ! vis [ v ]){ vis [ v ] = 1 ; q . push ( v ); cnt [ v ] ++ ; } } } } } void clear (){ memset ( cflow :: fst , 0 , sizeof ( cflow :: fst )); cflow :: tp = 0 ; } void init ( int n_ , int s_ , int t_ ){ clear (); n = n_ , s = s_ , t = t_ ; } struct pr { ll dis ; int u ; pr (){} pr ( int u_ , ll dis_ ){ u = u_ , dis = dis_ ;} }; bool operator < ( pr a , pr b ){ return ( a . dis != b . dis ) ? ( a . dis > b . dis ) : ( a . u > b . u ); } bool dijkstra (){ static priority_queue < pr > q ; while ( ! q . empty ()){ q . pop (); } memset ( dis , 0x3f , sizeof ( dis )); dis [ s ] = 0 ; mxw [ s ] = inf ; q . push ( pr ( s , 0 )); while ( ! q . empty ()){ int u = q . top (). u ; q . pop (); for ( int i = fst [ u ]; i != 0 ; i = e [ i ]. nxt ){ int v = e [ i ]. v ; ll c = e [ i ]. c + h [ u ] - h [ v ], w = e [ i ]. w ; if ( w && ( dis [ v ] > dis [ u ] + c )){ dis [ v ] = dis [ u ] + c ; mxw [ v ] = min ( mxw [ u ], w ); frm [ v ] = u ; fre [ v ] = i ; q . push ( pr ( v , dis [ v ])); } } } return dis [ t ] != inf ; } ll mincost , maxflow ; void MCMF (){ spfa (); memcpy ( h , dis , sizeof ( h )); mincost = maxflow = 0 ; while ( dijkstra ()){ ll flow = mxw [ t ]; maxflow += flow ; mincost += flow * ( dis [ t ] - h [ s ] + h [ t ]); for ( int i = t ; i != s ; i = frm [ i ]){ e [ fre [ i ]]. w -= flow ; e [ oth ( fre [ i ])]. w += flow ; } for ( int i = 1 ; i <= n ; i ++ ){ h [ i ] += dis [ i ]; } } } } int a , b , p , q ; inline int id ( int i , int j ){ return q * ( i -1 ) + j + 2 ; } int main (){ scanf ( \"%d%d%d%d\" , & a , & b , & p , & q ); p ++ , q ++ ; // \u6ce8\u610f\u6709 (p+1)*(q+1) \u4e2a\u70b9 cflow :: init ( p * q + 100 , 1 , 2 ); // \u4ee5 1 \u4e3a\u6e90\u70b9\uff0c2 \u4e3a\u6c47\u70b9 for ( int i = 1 ; i <= p ; i ++ ){ // \u5411\u4e1c\u8def\u5f84 for ( int j = 1 ; j < q ; j ++ ){ ll t ; scanf ( \"%lld\" , & t ); cflow :: addflow ( id ( i , j ), id ( i , j + 1 ), 1 , - t ); // \u8d39\u7528\u53d6\u76f8\u53cd\u6570\u8f6c\u6362\u4e3a\u6700\u5c0f\u8d39\u7528\u6700\u5927\u6d41 cflow :: addflow ( id ( i , j ), id ( i , j + 1 ), inf , 0 ); //\u6ce8\u610f\u8fd9\u6761\u8fb9\u4e0d\u662f\u53cd\u5411\u8fb9 // \u52a0\u53cd\u5411\u8fb9\u5728 addflow \u91cc } } for ( int j = 1 ; j <= q ; j ++ ){ // \u5411\u5317\u8def\u5f84 for ( int i = 1 ; i < p ; i ++ ){ ll t ; scanf ( \"%lld\" , & t ); cflow :: addflow ( id ( i , j ), id ( i + 1 , j ), 1 , - t ); cflow :: addflow ( id ( i , j ), id ( i + 1 , j ), inf , 0 ); } } for ( int i = 1 ; i <= a ; i ++ ){ ll k ; int x , y ; scanf ( \"%lld%d%d\" , & k , & x , & y ); cflow :: addflow ( 1 , id ( x + 1 , y + 1 ), k , 0 ); // \u51fa\u53d1\u70b9 } for ( int i = 1 ; i <= b ; i ++ ){ ll k ; int x , y ; scanf ( \"%lld%d%d\" , & k , & x , & y ); cflow :: addflow ( id ( x + 1 , y + 1 ), 2 , k , 0 ); // \u76ee\u7684\u5730 } cflow :: MCMF (); printf ( \"%lld \\n \" , - cflow :: mincost ); // \u8d39\u7528\u53d6\u4e86\u76f8\u53cd\u6570 return 0 ; }","title":"Code"},{"location":"solution/P4385/","tags":["\u9898\u89e3","\u8ba1\u7b97\u51e0\u4f55","\u7ebf\u6bb5\u6811"],"text":"P4385 [COCI2009 Final Exam#2] Dvapravca \u00b6 \u6837\u4f8b\u6f14\u793a1 \u6837\u4f8b\u6f14\u793a2 \u7ed9\u5b9a \\(n\\) \u4e2a\u7ea2\u8272\u6216\u84dd\u8272\u7684\u70b9\uff0c \u4e09\u70b9\u4e0d\u5171\u7ebf \uff0c\u6c42\u4e2d\u95f4\u6ca1\u6709\u84dd\u70b9\u7684\u4e24\u6761\u5e73\u884c\u7ebf\u95f4\u6700\u591a\u80fd\u6709\u51e0\u4e2a\u7ea2\u70b9\u3002 \u663e\u7136\uff0c\u4e24\u6761\u5e73\u884c\u7ebf\u4e00\u5b9a\u4e0d\u4f1a\u662f\u4e24\u70b9\u95f4\u7684\u8fde\u7ebf\uff0c\u5426\u5219\u5c06\u5e73\u884c\u7ebf\u65cb\u8f6c \u8db3\u591f\u5c0f\u7684 \u89d2\u5ea6 \\(\\delta\\) \u540e\u53ef\u4ee5\u5f97\u5230\u53e6\u4e00\u4e2a\u66f4\u4f18\u7684\u89e3\u3002 \u5047\u8bbe\u4e24\u6761\u5e73\u884c\u7ebf\u90fd\u5782\u76f4\u4e8e\u76f4\u7ebf \\(l\\) \uff0c\u8fc7\u6bcf\u4e2a\u70b9\u4f5c \\(l\\) \u7684\u5782\u7ebf\uff0c\u5f97\u5230 \\(n\\) \u4e2a\u70b9\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a \u6c42\u6295\u5f71\u5e8f\u5217\u4e0a\u7684\u6700\u957f\u8fde\u7eed\u7ea2\u8272\u5b50\u6bb5 \u3002 \u6837\u4f8b\u6f14\u793a1 \u53ef\u4ee5\u5f88\u76f4\u89c2\u7684\u89e3\u91ca\u8fd9\u4e2a\u601d\u8def\u3002 \u8003\u8651\u52a8\u6001\u7ef4\u62a4\u8fd9\u4e2a\u5e8f\u5217\u3002\u627e\u51fa\u8fd9 \\(n\\) \u4e2a\u70b9\u95f4\u7684\u6240\u6709\u8fde\u7ebf\uff0c\u5f53 \\(l\\) \u5782\u76f4\u4e8e\u8fde\u7ebf\u65f6\uff0c\u5c31\u4ea4\u6362\u8fde\u7ebf\u4e24\u7aef\u7684\u70b9\u5bf9\u5e94\u7684\u989c\u8272\u3002\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\u5c31\u53ef\u7406\u89e3\u3002 \u5f53\u4f60\u7406\u89e3\u8fd9\u4e00\u6b65\u65f6\uff0c\u4f60\u5df2\u7ecf\u80fd\u505a\u51fa\u8fd9\u9053\u9898\u4e86\u3002 \u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u957f\u8fde\u7eed\u96f6\u4e2a\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2\\log n)\\) \u3002 \u7136\u9e45 \u4e0d\u7528\u7ebf\u6bb5\u6811\uff0c\u66b4\u529b\u7ef4\u62a4\u8fde\u7eed\u96f6\u52a0\u4e0a O2 \u4e5f\u80fd AC\uff01 \u53c2\u8003\u7a0b\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 #include <iostream> #include <cstdio> #include <cstring> #include <algorithm> #include <cmath> #include <vector> #include <queue> using namespace std ; #define il inline typedef long long ll ; ll gcd ( ll a , ll b ){ return b == 0 ? a : gcd ( b , a % b ); } typedef double Grad ; int n ; struct Node { int x , y ; int p ; char c ; } a [ 1005 ]; bool cmp ( Node a , Node b ){ return a . x != b . x ? a . x < b . x : a . y > b . y ; } int s [ 1005 ]; struct Line { int i1 , i2 ; // id Grad G ; Line (){} Line ( int a_ , int b_ ){ i1 = a_ , i2 = b_ ; G = 1.0 * ( a [ i2 ]. y - a [ i1 ]. y ) / ( a [ i2 ]. x - a [ i1 ]. x );} bool operator < ( Line b ){ return G < b . G ; } } ls [ 1000006 ]; int ms = 0 ; vector < pair < int , int > > sw [ 1000006 ]; int st ; int did [ 1006 ], id [ 1006 ]; int main (){ scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ){ scanf ( \"%d%d\" , & a [ i ]. x , & a [ i ]. y ); a [ i ]. c = getchar (); while ( a [ i ]. c != 'R' && a [ i ]. c != 'B' ){ a [ i ]. c = getchar (); } } sort ( a + 1 , a + n + 1 , cmp ); for ( int i = 1 ; i <= n ; i ++ ){ s [ i ] = (( a [ i ]. c == 'R' ) ? 0 : 1 ); } for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = i + 1 ; j <= n ; j ++ ){ ls [ ++ ms ] = Line ( i , j ); } } sort ( ls + 1 , ls + ms + 1 ); st = 1 ; sw [ 1 ]. push_back ( make_pair ( ls [ 1 ]. i1 , ls [ 1 ]. i2 )); for ( int i = 2 ; i <= ms ; i ++ ){ if ( ls [ i ]. G != ls [ i -1 ]. G ){ st ++ ; } sw [ st ]. push_back ( make_pair ( ls [ i ]. i1 , ls [ i ]. i2 )); } int ans = 0 ; int l = 1 ; // \u6c38\u8fdc\u7115\u53d1\u5149\u8292\u7684\u66b4\u529b\u7ef4\u62a4\u533a\u95f4 for ( int j = 1 ; j <= n ; j ++ ){ if ( s [ j ] == 1 ){ l = j + 1 ; } if ( s [ l ] == 0 && s [ j ] == 0 ){ ans = max ( ans , j - l + 1 );} } for ( int i = 1 ; i <= n ; i ++ ){ id [ i ] = did [ i ] = i ;} for ( int i = 1 ; i <= st ; i ++ ){ for ( int j = 0 ; j < sw [ i ]. size (); j ++ ){ int x = sw [ i ][ j ]. first , y = sw [ i ][ j ]. second , u , v ; swap ( did [ x ], did [ y ]); swap ( id [ did [ x ]], id [ did [ y ]]); u = s [ did [ x ]], v = s [ did [ y ]]; s [ did [ x ]] = v , s [ did [ y ]] = u ; // \u5b8c\u5168\u6ca1\u7528\u7684\u8c03\u8bd5\u4fe1\u606f } int l = 1 ; // \u8fd0\u7528\u53cd\u590d\u7684\u4fee\u8f9e\u624b\u6cd5 for ( int j = 1 ; j <= n ; j ++ ){ if ( s [ j ] == 1 ){ l = j + 1 ; } if ( s [ l ] == 0 && s [ j ] == 0 ){ ans = max ( ans , j - l + 1 );} } } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"P4385 Dvapravca"},{"location":"solution/P4385/#p4385-coci2009-final-exam2-dvapravca","text":"\u6837\u4f8b\u6f14\u793a1 \u6837\u4f8b\u6f14\u793a2 \u7ed9\u5b9a \\(n\\) \u4e2a\u7ea2\u8272\u6216\u84dd\u8272\u7684\u70b9\uff0c \u4e09\u70b9\u4e0d\u5171\u7ebf \uff0c\u6c42\u4e2d\u95f4\u6ca1\u6709\u84dd\u70b9\u7684\u4e24\u6761\u5e73\u884c\u7ebf\u95f4\u6700\u591a\u80fd\u6709\u51e0\u4e2a\u7ea2\u70b9\u3002 \u663e\u7136\uff0c\u4e24\u6761\u5e73\u884c\u7ebf\u4e00\u5b9a\u4e0d\u4f1a\u662f\u4e24\u70b9\u95f4\u7684\u8fde\u7ebf\uff0c\u5426\u5219\u5c06\u5e73\u884c\u7ebf\u65cb\u8f6c \u8db3\u591f\u5c0f\u7684 \u89d2\u5ea6 \\(\\delta\\) \u540e\u53ef\u4ee5\u5f97\u5230\u53e6\u4e00\u4e2a\u66f4\u4f18\u7684\u89e3\u3002 \u5047\u8bbe\u4e24\u6761\u5e73\u884c\u7ebf\u90fd\u5782\u76f4\u4e8e\u76f4\u7ebf \\(l\\) \uff0c\u8fc7\u6bcf\u4e2a\u70b9\u4f5c \\(l\\) \u7684\u5782\u7ebf\uff0c\u5f97\u5230 \\(n\\) \u4e2a\u70b9\uff0c\u90a3\u4e48\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a \u6c42\u6295\u5f71\u5e8f\u5217\u4e0a\u7684\u6700\u957f\u8fde\u7eed\u7ea2\u8272\u5b50\u6bb5 \u3002 \u6837\u4f8b\u6f14\u793a1 \u53ef\u4ee5\u5f88\u76f4\u89c2\u7684\u89e3\u91ca\u8fd9\u4e2a\u601d\u8def\u3002 \u8003\u8651\u52a8\u6001\u7ef4\u62a4\u8fd9\u4e2a\u5e8f\u5217\u3002\u627e\u51fa\u8fd9 \\(n\\) \u4e2a\u70b9\u95f4\u7684\u6240\u6709\u8fde\u7ebf\uff0c\u5f53 \\(l\\) \u5782\u76f4\u4e8e\u8fde\u7ebf\u65f6\uff0c\u5c31\u4ea4\u6362\u8fde\u7ebf\u4e24\u7aef\u7684\u70b9\u5bf9\u5e94\u7684\u989c\u8272\u3002\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\u5c31\u53ef\u7406\u89e3\u3002 \u5f53\u4f60\u7406\u89e3\u8fd9\u4e00\u6b65\u65f6\uff0c\u4f60\u5df2\u7ecf\u80fd\u505a\u51fa\u8fd9\u9053\u9898\u4e86\u3002 \u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6700\u957f\u8fde\u7eed\u96f6\u4e2a\u6570\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 \\(O(n^2\\log n)\\) \u3002 \u7136\u9e45 \u4e0d\u7528\u7ebf\u6bb5\u6811\uff0c\u66b4\u529b\u7ef4\u62a4\u8fde\u7eed\u96f6\u52a0\u4e0a O2 \u4e5f\u80fd AC\uff01 \u53c2\u8003\u7a0b\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 #include <iostream> #include <cstdio> #include <cstring> #include <algorithm> #include <cmath> #include <vector> #include <queue> using namespace std ; #define il inline typedef long long ll ; ll gcd ( ll a , ll b ){ return b == 0 ? a : gcd ( b , a % b ); } typedef double Grad ; int n ; struct Node { int x , y ; int p ; char c ; } a [ 1005 ]; bool cmp ( Node a , Node b ){ return a . x != b . x ? a . x < b . x : a . y > b . y ; } int s [ 1005 ]; struct Line { int i1 , i2 ; // id Grad G ; Line (){} Line ( int a_ , int b_ ){ i1 = a_ , i2 = b_ ; G = 1.0 * ( a [ i2 ]. y - a [ i1 ]. y ) / ( a [ i2 ]. x - a [ i1 ]. x );} bool operator < ( Line b ){ return G < b . G ; } } ls [ 1000006 ]; int ms = 0 ; vector < pair < int , int > > sw [ 1000006 ]; int st ; int did [ 1006 ], id [ 1006 ]; int main (){ scanf ( \"%d\" , & n ); for ( int i = 1 ; i <= n ; i ++ ){ scanf ( \"%d%d\" , & a [ i ]. x , & a [ i ]. y ); a [ i ]. c = getchar (); while ( a [ i ]. c != 'R' && a [ i ]. c != 'B' ){ a [ i ]. c = getchar (); } } sort ( a + 1 , a + n + 1 , cmp ); for ( int i = 1 ; i <= n ; i ++ ){ s [ i ] = (( a [ i ]. c == 'R' ) ? 0 : 1 ); } for ( int i = 1 ; i <= n ; i ++ ){ for ( int j = i + 1 ; j <= n ; j ++ ){ ls [ ++ ms ] = Line ( i , j ); } } sort ( ls + 1 , ls + ms + 1 ); st = 1 ; sw [ 1 ]. push_back ( make_pair ( ls [ 1 ]. i1 , ls [ 1 ]. i2 )); for ( int i = 2 ; i <= ms ; i ++ ){ if ( ls [ i ]. G != ls [ i -1 ]. G ){ st ++ ; } sw [ st ]. push_back ( make_pair ( ls [ i ]. i1 , ls [ i ]. i2 )); } int ans = 0 ; int l = 1 ; // \u6c38\u8fdc\u7115\u53d1\u5149\u8292\u7684\u66b4\u529b\u7ef4\u62a4\u533a\u95f4 for ( int j = 1 ; j <= n ; j ++ ){ if ( s [ j ] == 1 ){ l = j + 1 ; } if ( s [ l ] == 0 && s [ j ] == 0 ){ ans = max ( ans , j - l + 1 );} } for ( int i = 1 ; i <= n ; i ++ ){ id [ i ] = did [ i ] = i ;} for ( int i = 1 ; i <= st ; i ++ ){ for ( int j = 0 ; j < sw [ i ]. size (); j ++ ){ int x = sw [ i ][ j ]. first , y = sw [ i ][ j ]. second , u , v ; swap ( did [ x ], did [ y ]); swap ( id [ did [ x ]], id [ did [ y ]]); u = s [ did [ x ]], v = s [ did [ y ]]; s [ did [ x ]] = v , s [ did [ y ]] = u ; // \u5b8c\u5168\u6ca1\u7528\u7684\u8c03\u8bd5\u4fe1\u606f } int l = 1 ; // \u8fd0\u7528\u53cd\u590d\u7684\u4fee\u8f9e\u624b\u6cd5 for ( int j = 1 ; j <= n ; j ++ ){ if ( s [ j ] == 1 ){ l = j + 1 ; } if ( s [ l ] == 0 && s [ j ] == 0 ){ ans = max ( ans , j - l + 1 );} } } printf ( \"%d \\n \" , ans ); return 0 ; }","title":"P4385  [COCI2009 Final Exam#2] Dvapravca"},{"location":"solution/at2318/","tags":["\u9898\u89e3","\u5b57\u7b26\u4e32","\u500d\u589e"],"text":"AT2318 Robot and String \u00b6 \u4f20\u9001\u95e8 \u8003\u70b9\uff1a\u500d\u589e & DP \u9898\u89e3\u8f83\u8be6\u7ec6\uff0c\u9002\u5408\u65b0\u624b\u9605\u8bfb \u786e\u5b9a\u9012\u63a8\u5f0f \u00b6 \u9996\u5148\u8003\u8651\u5c06 \u4ee5\u67d0\u4e2a\u7aef\u70b9\u4f5c\u4e3a\u5de6\u7aef\u70b9\u7684\u5b50\u4e32 \u53d8\u6362\u4e3a\u7a7a \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5c06\u4ee5 \\(i\\) \u4e3a\u5de6\u7aef\u70b9\uff0c\u53ef\u4ee5\u53d8\u6362\u4e3a\u7a7a\u7684\u6700\u5c0f\u5b50\u4e32\u53f3\u7aef\u70b9\u7684 \u540e\u4e00\u4f4d \u8bb0\u4e3a \\(t_{i,26}\\) \u65e2\u7136\u53ea\u6709 zz \u53ef\u4ee5\u53d8\u6362\u4e3a\u7a7a\uff0c\u6211\u4eec\u5c31\u628a\u4ee5 \\(i\\) \u4e3a\u5de6\u7aef\u70b9\uff0c\u53ef\u4ee5\u53d8\u6362\u4e3a z \u7684\u6700\u5c0f\u5b50\u4e32\u53f3\u7aef\u70b9\u7684\u540e\u4e00\u4f4d\u8bb0\u4e3a \\(t_{i,25}\\) \u4ee5\u6b64\u7c7b\u63a8\uff0c\u6211\u4eec\u5c06\u4ee5 \\(i\\) \u4e3a\u5de6\u7aef\u70b9\uff0c\u53ef\u4ee5\u53d8\u6362\u4e3a\u7b2c \\(j\\) \u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u5b50\u4e32\u53f3\u7aef\u70b9\u7684\u540e\u4e00\u4f4d\u8bb0\u4e3a \\(t_{i,j}\\) \uff08 a \u4e3a\u7b2c \\(0\\) \u4e2a\u5b57\u6bcd \uff09 \u5982\u4f55\u6c42\u51fa \\(t_{i,j}\\) \u7684\u503c\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e0b\u5217\u9012\u63a8\u5f0f\uff1a \\[ t_{i,j}=\\left\\{ \\begin{aligned} i+1 & & j=s_i \\\\ t_{t_{i,j-1},j-1} & & j>s_i \\\\ t_{t_{i,26},j} & & j<s_i \\end{aligned} \\right. \\] \u5176\u4e2d \\(s_i\\) \u8868\u793a\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u7b2c \\(i\\) \u4f4d\u5b57\u6bcd\u7684\u7f16\u53f7\uff0c \\(i\\) \u4ece \\(n\\) \u5230 \\(1\\) \u904d\u5386 \u8fd9\u4e2a\u5f0f\u5b50\u4e2d\uff0c\u7b2c\u4e00\u884c\u662f\u521d\u59cb\u6761\u4ef6\uff0c\u7b2c\u4e8c\u884c\u8868\u793a \\(j\\) \u4ece\u4e24\u4e2a\u53ef\u4ee5\u53d8\u4e3a \\(j-1\\) \u7684\u5b50\u4e32 \u5408\u5e76\u800c\u6765 \uff0c\u7b2c\u4e09\u884c\u8868\u793a\u53ef\u4ee5\u5148\u6d88\u9664\u4ee5 \\(i\\) \u5f00\u5934\u7684\u4e00\u6bb5\u5b50\u4e32\uff0c\u518d\u4ece\u8be5\u5b50\u4e32\u53f3\u7aef\u70b9\u7684 \u540e\u4e00\u4f4d \u5f00\u59cb\u6d88\u9664\u4e3a \\(j\\) \u8fb9\u754c\u6761\u4ef6 \u56e0\u4e3a\u6211\u4eec\u53d6\u4e86\u76ee\u6807\u5b50\u4e32\u7684\u540e\u4e00\u4f4d\uff0c\u6240\u4ee5\u5b50\u4e32\u7684\u6700\u540e\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u5360\u4f4d\u7b26\uff08\u7f16\u53f7 \\(n+1\\) \uff09\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u518d\u89c4\u5b9a\u5360\u4f4d\u7b26\u7684\u540e\u4e00\u4f4d\u662f\u7ed3\u675f\u7b26\uff08 \\(n+2\\) \uff09\uff0c\u5e76\u628a \\(t_{n+1,x}\\) \u548c \\(t_{n+2,x}\\) \u8bbe\u4e3a \\(n+2\\) DP\u6838\u5fc3\u4ee3\u7801 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 for ( int i = 1 ; i <= n + 2 ; i ++ ){ for ( int j = 0 ; j <= 26 ; j ++ ){ t [ i ][ j ] = n + 2 ; // \u8fb9\u754c } } for ( int i = n ; i >= 1 ; i -- ){ // \u4e0b\u6807\u4ece 1 \u5f00\u59cb int nw = s [ i ] - 'a' ; t [ i ][ nw ] = i + 1 ; for ( int j = nw + 1 ; j <= 26 ; j ++ ){ t [ i ][ j ] = t [ t [ i ][ j -1 ]][ j -1 ]; } for ( int j = 0 ; j < nw ; j ++ ){ t [ i ][ j ] = t [ t [ i ][ 26 ]][ j ]; } } \u53ea\u8981\u6cbf\u7740 \\(t_{x,26}\\) \u4e00\u76f4\u8df3\u8f6c\u5373\u53ef 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 while ( q -- ){ int l , r ; scanf ( \"%d%d\" , & l , & r ); r ++ ; while ( 1 ){ if ( t [ l ][ 26 ] <= r ){ l = t [ l ][ 26 ]; } } if ( l == r ){ puts ( \"Yes\" ); } else { puts ( \"No\" ); } } \u500d\u589e \u00b6 \u7136\u9e45\u8fd8\u6ca1\u5b8c\u2026\u2026 \u8fd9\u6837\u4f1aTLE\u5427\uff1f \u6211\u4eec\u53ef\u4ee5\u500d\u589e\u5904\u7406\u4ee5 \\(i\\) \u4e3a\u5de6\u7aef\u70b9\u7b2c \\(2^j\\) \u77ed\u7684\u80fd\u88ab\u5b8c\u5168\u6d88\u9664\u7684\u5b50\u4e32\uff0c\u8bb0\u4e3a \\(f_{i,j}\\) \u3002\u6c42\u5f97\u9012\u63a8\u5f0f \\(f_{i,j}=f_{f_{i,j-1},j-1}\\) \u8d77\u59cb\u6761\u4ef6\u4e3a \\(f_{i,0}=t_{i,26}\\) \u8df3\u8f6c\u65f6\uff0c\u76f4\u63a5\u4ece\u5927\u5f80\u5c0f\u8bd5\u5373\u53ef\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include <iostream> #include <cstdio> #include <cstring> #include <algorithm> using namespace std ; char s [ 500005 ]; int n , q ; int t [ 500005 ][ 31 ], f [ 500005 ][ 31 ]; int main (){ scanf ( \"%s%d\" , s + 1 , & q ); n = strlen ( s + 1 ); for ( int i = 1 ; i <= n + 2 ; i ++ ){ for ( int j = 0 ; j <= 26 ; j ++ ){ t [ i ][ j ] = n + 2 ; // \u8fb9\u754c f [ i ][ j ] = n + 2 ; } } for ( int i = n ; i >= 1 ; i -- ){ // DP int nw = s [ i ] - 'a' ; t [ i ][ nw ] = i + 1 ; for ( int j = nw + 1 ; j <= 26 ; j ++ ){ t [ i ][ j ] = t [ t [ i ][ j -1 ]][ j -1 ]; } for ( int j = 0 ; j < nw ; j ++ ){ t [ i ][ j ] = t [ t [ i ][ 26 ]][ j ]; } } for ( int i = 1 ; i <= n ; i ++ ){ // \u500d\u589e\u9884\u5904\u7406 f [ i ][ 0 ] = t [ i ][ 26 ]; } for ( int j = 1 ;( 1 << j ) <= n ; j ++ ){ for ( int i = 1 ; i <= n ; i ++ ){ f [ i ][ j ] = f [ f [ i ][ j -1 ]][ j -1 ]; } } while ( q -- ){ int l , r ; scanf ( \"%d%d\" , & l , & r ); r ++ ; for ( int j = 20 ; j >= 0 ; j -- ){ // \u500d\u589e\u8df3\u8f6c if ( f [ l ][ j ] <= r ){ l = f [ l ][ j ]; } } if ( l == r ){ puts ( \"Yes\" ); } else { puts ( \"No\" ); } } return 0 ; }","title":"AT2318 Robot and String"},{"location":"solution/at2318/#at2318-robot-and-string","text":"\u4f20\u9001\u95e8 \u8003\u70b9\uff1a\u500d\u589e & DP \u9898\u89e3\u8f83\u8be6\u7ec6\uff0c\u9002\u5408\u65b0\u624b\u9605\u8bfb","title":"AT2318 Robot and String"},{"location":"solution/at2318/#_1","text":"\u9996\u5148\u8003\u8651\u5c06 \u4ee5\u67d0\u4e2a\u7aef\u70b9\u4f5c\u4e3a\u5de6\u7aef\u70b9\u7684\u5b50\u4e32 \u53d8\u6362\u4e3a\u7a7a \u4e3a\u4e86\u65b9\u4fbf\uff0c\u5c06\u4ee5 \\(i\\) \u4e3a\u5de6\u7aef\u70b9\uff0c\u53ef\u4ee5\u53d8\u6362\u4e3a\u7a7a\u7684\u6700\u5c0f\u5b50\u4e32\u53f3\u7aef\u70b9\u7684 \u540e\u4e00\u4f4d \u8bb0\u4e3a \\(t_{i,26}\\) \u65e2\u7136\u53ea\u6709 zz \u53ef\u4ee5\u53d8\u6362\u4e3a\u7a7a\uff0c\u6211\u4eec\u5c31\u628a\u4ee5 \\(i\\) \u4e3a\u5de6\u7aef\u70b9\uff0c\u53ef\u4ee5\u53d8\u6362\u4e3a z \u7684\u6700\u5c0f\u5b50\u4e32\u53f3\u7aef\u70b9\u7684\u540e\u4e00\u4f4d\u8bb0\u4e3a \\(t_{i,25}\\) \u4ee5\u6b64\u7c7b\u63a8\uff0c\u6211\u4eec\u5c06\u4ee5 \\(i\\) \u4e3a\u5de6\u7aef\u70b9\uff0c\u53ef\u4ee5\u53d8\u6362\u4e3a\u7b2c \\(j\\) \u4e2a\u5b57\u6bcd\u7684\u6700\u5c0f\u5b50\u4e32\u53f3\u7aef\u70b9\u7684\u540e\u4e00\u4f4d\u8bb0\u4e3a \\(t_{i,j}\\) \uff08 a \u4e3a\u7b2c \\(0\\) \u4e2a\u5b57\u6bcd \uff09 \u5982\u4f55\u6c42\u51fa \\(t_{i,j}\\) \u7684\u503c\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u4e0b\u5217\u9012\u63a8\u5f0f\uff1a \\[ t_{i,j}=\\left\\{ \\begin{aligned} i+1 & & j=s_i \\\\ t_{t_{i,j-1},j-1} & & j>s_i \\\\ t_{t_{i,26},j} & & j<s_i \\end{aligned} \\right. \\] \u5176\u4e2d \\(s_i\\) \u8868\u793a\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u7b2c \\(i\\) \u4f4d\u5b57\u6bcd\u7684\u7f16\u53f7\uff0c \\(i\\) \u4ece \\(n\\) \u5230 \\(1\\) \u904d\u5386 \u8fd9\u4e2a\u5f0f\u5b50\u4e2d\uff0c\u7b2c\u4e00\u884c\u662f\u521d\u59cb\u6761\u4ef6\uff0c\u7b2c\u4e8c\u884c\u8868\u793a \\(j\\) \u4ece\u4e24\u4e2a\u53ef\u4ee5\u53d8\u4e3a \\(j-1\\) \u7684\u5b50\u4e32 \u5408\u5e76\u800c\u6765 \uff0c\u7b2c\u4e09\u884c\u8868\u793a\u53ef\u4ee5\u5148\u6d88\u9664\u4ee5 \\(i\\) \u5f00\u5934\u7684\u4e00\u6bb5\u5b50\u4e32\uff0c\u518d\u4ece\u8be5\u5b50\u4e32\u53f3\u7aef\u70b9\u7684 \u540e\u4e00\u4f4d \u5f00\u59cb\u6d88\u9664\u4e3a \\(j\\) \u8fb9\u754c\u6761\u4ef6 \u56e0\u4e3a\u6211\u4eec\u53d6\u4e86\u76ee\u6807\u5b50\u4e32\u7684\u540e\u4e00\u4f4d\uff0c\u6240\u4ee5\u5b50\u4e32\u7684\u6700\u540e\u4e00\u5b9a\u8981\u6709\u4e00\u4e2a\u5360\u4f4d\u7b26\uff08\u7f16\u53f7 \\(n+1\\) \uff09\uff0c\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u518d\u89c4\u5b9a\u5360\u4f4d\u7b26\u7684\u540e\u4e00\u4f4d\u662f\u7ed3\u675f\u7b26\uff08 \\(n+2\\) \uff09\uff0c\u5e76\u628a \\(t_{n+1,x}\\) \u548c \\(t_{n+2,x}\\) \u8bbe\u4e3a \\(n+2\\)","title":"\u786e\u5b9a\u9012\u63a8\u5f0f"},{"location":"solution/at2318/#dp","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 for ( int i = 1 ; i <= n + 2 ; i ++ ){ for ( int j = 0 ; j <= 26 ; j ++ ){ t [ i ][ j ] = n + 2 ; // \u8fb9\u754c } } for ( int i = n ; i >= 1 ; i -- ){ // \u4e0b\u6807\u4ece 1 \u5f00\u59cb int nw = s [ i ] - 'a' ; t [ i ][ nw ] = i + 1 ; for ( int j = nw + 1 ; j <= 26 ; j ++ ){ t [ i ][ j ] = t [ t [ i ][ j -1 ]][ j -1 ]; } for ( int j = 0 ; j < nw ; j ++ ){ t [ i ][ j ] = t [ t [ i ][ 26 ]][ j ]; } } \u53ea\u8981\u6cbf\u7740 \\(t_{x,26}\\) \u4e00\u76f4\u8df3\u8f6c\u5373\u53ef 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 while ( q -- ){ int l , r ; scanf ( \"%d%d\" , & l , & r ); r ++ ; while ( 1 ){ if ( t [ l ][ 26 ] <= r ){ l = t [ l ][ 26 ]; } } if ( l == r ){ puts ( \"Yes\" ); } else { puts ( \"No\" ); } }","title":"DP\u6838\u5fc3\u4ee3\u7801"},{"location":"solution/at2318/#_2","text":"\u7136\u9e45\u8fd8\u6ca1\u5b8c\u2026\u2026 \u8fd9\u6837\u4f1aTLE\u5427\uff1f \u6211\u4eec\u53ef\u4ee5\u500d\u589e\u5904\u7406\u4ee5 \\(i\\) \u4e3a\u5de6\u7aef\u70b9\u7b2c \\(2^j\\) \u77ed\u7684\u80fd\u88ab\u5b8c\u5168\u6d88\u9664\u7684\u5b50\u4e32\uff0c\u8bb0\u4e3a \\(f_{i,j}\\) \u3002\u6c42\u5f97\u9012\u63a8\u5f0f \\(f_{i,j}=f_{f_{i,j-1},j-1}\\) \u8d77\u59cb\u6761\u4ef6\u4e3a \\(f_{i,0}=t_{i,26}\\) \u8df3\u8f6c\u65f6\uff0c\u76f4\u63a5\u4ece\u5927\u5f80\u5c0f\u8bd5\u5373\u53ef\u3002 \u53c2\u8003\u4ee3\u7801 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 #include <iostream> #include <cstdio> #include <cstring> #include <algorithm> using namespace std ; char s [ 500005 ]; int n , q ; int t [ 500005 ][ 31 ], f [ 500005 ][ 31 ]; int main (){ scanf ( \"%s%d\" , s + 1 , & q ); n = strlen ( s + 1 ); for ( int i = 1 ; i <= n + 2 ; i ++ ){ for ( int j = 0 ; j <= 26 ; j ++ ){ t [ i ][ j ] = n + 2 ; // \u8fb9\u754c f [ i ][ j ] = n + 2 ; } } for ( int i = n ; i >= 1 ; i -- ){ // DP int nw = s [ i ] - 'a' ; t [ i ][ nw ] = i + 1 ; for ( int j = nw + 1 ; j <= 26 ; j ++ ){ t [ i ][ j ] = t [ t [ i ][ j -1 ]][ j -1 ]; } for ( int j = 0 ; j < nw ; j ++ ){ t [ i ][ j ] = t [ t [ i ][ 26 ]][ j ]; } } for ( int i = 1 ; i <= n ; i ++ ){ // \u500d\u589e\u9884\u5904\u7406 f [ i ][ 0 ] = t [ i ][ 26 ]; } for ( int j = 1 ;( 1 << j ) <= n ; j ++ ){ for ( int i = 1 ; i <= n ; i ++ ){ f [ i ][ j ] = f [ f [ i ][ j -1 ]][ j -1 ]; } } while ( q -- ){ int l , r ; scanf ( \"%d%d\" , & l , & r ); r ++ ; for ( int j = 20 ; j >= 0 ; j -- ){ // \u500d\u589e\u8df3\u8f6c if ( f [ l ][ j ] <= r ){ l = f [ l ][ j ]; } } if ( l == r ){ puts ( \"Yes\" ); } else { puts ( \"No\" ); } } return 0 ; }","title":"\u500d\u589e"}]}